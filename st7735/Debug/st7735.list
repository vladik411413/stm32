
st7735.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f60  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015d4  0800406c  0800406c  0001406c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005640  08005640  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08005640  08005640  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005640  08005640  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005640  08005640  00015640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005644  08005644  00015644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005648  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  2000001c  08005664  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08005664  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e6e5  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028e3  00000000  00000000  0002e76d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe8  00000000  00000000  00031050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f63  00000000  00000000  00032038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011cda  00000000  00000000  0004af9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009106d  00000000  00000000  0005cc75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000c30  00000000  00000000  000edce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004228  00000000  00000000  000ee914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  000f2b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004054 	.word	0x08004054

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08004054 	.word	0x08004054

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 feaf 	bl	8000eb4 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(1000);
 8000156:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800015a:	f000 ff0d 	bl	8000f78 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015e:	f000 f8bf 	bl	80002e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000162:	f000 fa65 	bl	8000630 <MX_GPIO_Init>
  MX_RTC_Init();
 8000166:	f000 f989 	bl	800047c <MX_RTC_Init>
  MX_SPI1_Init();
 800016a:	f000 f9d5 	bl	8000518 <MX_SPI1_Init>
  MX_ADC1_Init();
 800016e:	f000 f917 	bl	80003a0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000172:	f000 fa07 	bl	8000584 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8000176:	484f      	ldr	r0, [pc, #316]	; (80002b4 <main+0x168>)
 8000178:	f001 f8d4 	bl	8001324 <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 800017c:	484e      	ldr	r0, [pc, #312]	; (80002b8 <main+0x16c>)
 800017e:	f003 fb33 	bl	80037e8 <HAL_TIM_Base_Start_IT>
  //DISPLAY INIT
  ST7735_Init();
 8000182:	f000 fbc3 	bl	800090c <ST7735_Init>
  ST7735_FillScreen(ST7735_BLACK);
 8000186:	2000      	movs	r0, #0
 8000188:	f000 fd10 	bl	8000bac <ST7735_FillScreen>
  ST7735_WriteString(0, 0, "  Zhenya     miss2005     you are   a miracle) ", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 800018c:	4b4b      	ldr	r3, [pc, #300]	; (80002bc <main+0x170>)
 800018e:	2200      	movs	r2, #0
 8000190:	9202      	str	r2, [sp, #8]
 8000192:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000196:	9201      	str	r2, [sp, #4]
 8000198:	685a      	ldr	r2, [r3, #4]
 800019a:	9200      	str	r2, [sp, #0]
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	4a48      	ldr	r2, [pc, #288]	; (80002c0 <main+0x174>)
 80001a0:	2100      	movs	r1, #0
 80001a2:	2000      	movs	r0, #0
 80001a4:	f000 fc43 	bl	8000a2e <ST7735_WriteString>
  HAL_Delay(1000);
 80001a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001ac:	f000 fee4 	bl	8000f78 <HAL_Delay>
  ST7735_FillScreen(ST7735_BLACK);
 80001b0:	2000      	movs	r0, #0
 80001b2:	f000 fcfb 	bl	8000bac <ST7735_FillScreen>

  //ADC calibration
  HAL_ADC_Stop(&hadc1);
 80001b6:	483f      	ldr	r0, [pc, #252]	; (80002b4 <main+0x168>)
 80001b8:	f001 f888 	bl	80012cc <HAL_ADC_Stop>
  HAL_ADCEx_Calibration_Start(&hadc1);
 80001bc:	483d      	ldr	r0, [pc, #244]	; (80002b4 <main+0x168>)
 80001be:	f001 fa03 	bl	80015c8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 80001c2:	483c      	ldr	r0, [pc, #240]	; (80002b4 <main+0x168>)
 80001c4:	f000 ffd4 	bl	8001170 <HAL_ADC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  itoa(time, str, 10);
 80001c8:	4b3e      	ldr	r3, [pc, #248]	; (80002c4 <main+0x178>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	220a      	movs	r2, #10
 80001ce:	493e      	ldr	r1, [pc, #248]	; (80002c8 <main+0x17c>)
 80001d0:	4618      	mov	r0, r3
 80001d2:	f003 fecf 	bl	8003f74 <itoa>
	  ST7735_WriteString(5, 20, str, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80001d6:	4b3d      	ldr	r3, [pc, #244]	; (80002cc <main+0x180>)
 80001d8:	2200      	movs	r2, #0
 80001da:	9202      	str	r2, [sp, #8]
 80001dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80001e0:	9201      	str	r2, [sp, #4]
 80001e2:	685a      	ldr	r2, [r3, #4]
 80001e4:	9200      	str	r2, [sp, #0]
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a37      	ldr	r2, [pc, #220]	; (80002c8 <main+0x17c>)
 80001ea:	2114      	movs	r1, #20
 80001ec:	2005      	movs	r0, #5
 80001ee:	f000 fc1e 	bl	8000a2e <ST7735_WriteString>
	  itoa(x, str, 10);
 80001f2:	4b37      	ldr	r3, [pc, #220]	; (80002d0 <main+0x184>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	220a      	movs	r2, #10
 80001f8:	4933      	ldr	r1, [pc, #204]	; (80002c8 <main+0x17c>)
 80001fa:	4618      	mov	r0, r3
 80001fc:	f003 feba 	bl	8003f74 <itoa>
	  ST7735_WriteString(5, 40, str, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000200:	4b32      	ldr	r3, [pc, #200]	; (80002cc <main+0x180>)
 8000202:	2200      	movs	r2, #0
 8000204:	9202      	str	r2, [sp, #8]
 8000206:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800020a:	9201      	str	r2, [sp, #4]
 800020c:	685a      	ldr	r2, [r3, #4]
 800020e:	9200      	str	r2, [sp, #0]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a2d      	ldr	r2, [pc, #180]	; (80002c8 <main+0x17c>)
 8000214:	2128      	movs	r1, #40	; 0x28
 8000216:	2005      	movs	r0, #5
 8000218:	f000 fc09 	bl	8000a2e <ST7735_WriteString>
	  itoa(y, str, 10);
 800021c:	4b2d      	ldr	r3, [pc, #180]	; (80002d4 <main+0x188>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	220a      	movs	r2, #10
 8000222:	4929      	ldr	r1, [pc, #164]	; (80002c8 <main+0x17c>)
 8000224:	4618      	mov	r0, r3
 8000226:	f003 fea5 	bl	8003f74 <itoa>
	  ST7735_WriteString(5, 60, str, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800022a:	4b28      	ldr	r3, [pc, #160]	; (80002cc <main+0x180>)
 800022c:	2200      	movs	r2, #0
 800022e:	9202      	str	r2, [sp, #8]
 8000230:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000234:	9201      	str	r2, [sp, #4]
 8000236:	685a      	ldr	r2, [r3, #4]
 8000238:	9200      	str	r2, [sp, #0]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a22      	ldr	r2, [pc, #136]	; (80002c8 <main+0x17c>)
 800023e:	213c      	movs	r1, #60	; 0x3c
 8000240:	2005      	movs	r0, #5
 8000242:	f000 fbf4 	bl	8000a2e <ST7735_WriteString>
	  info = ADC1->CR1;
 8000246:	4b24      	ldr	r3, [pc, #144]	; (80002d8 <main+0x18c>)
 8000248:	685b      	ldr	r3, [r3, #4]
 800024a:	4a24      	ldr	r2, [pc, #144]	; (80002dc <main+0x190>)
 800024c:	6013      	str	r3, [r2, #0]
	  itoa(info, str, 32);
 800024e:	4b23      	ldr	r3, [pc, #140]	; (80002dc <main+0x190>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	2220      	movs	r2, #32
 8000254:	491c      	ldr	r1, [pc, #112]	; (80002c8 <main+0x17c>)
 8000256:	4618      	mov	r0, r3
 8000258:	f003 fe8c 	bl	8003f74 <itoa>
	  ST7735_WriteString(5, 80, str, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800025c:	4b1b      	ldr	r3, [pc, #108]	; (80002cc <main+0x180>)
 800025e:	2200      	movs	r2, #0
 8000260:	9202      	str	r2, [sp, #8]
 8000262:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000266:	9201      	str	r2, [sp, #4]
 8000268:	685a      	ldr	r2, [r3, #4]
 800026a:	9200      	str	r2, [sp, #0]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4a16      	ldr	r2, [pc, #88]	; (80002c8 <main+0x17c>)
 8000270:	2150      	movs	r1, #80	; 0x50
 8000272:	2005      	movs	r0, #5
 8000274:	f000 fbdb 	bl	8000a2e <ST7735_WriteString>
	  info = ADC1->CR2;
 8000278:	4b17      	ldr	r3, [pc, #92]	; (80002d8 <main+0x18c>)
 800027a:	689b      	ldr	r3, [r3, #8]
 800027c:	4a17      	ldr	r2, [pc, #92]	; (80002dc <main+0x190>)
 800027e:	6013      	str	r3, [r2, #0]
	  itoa(info, str, 32);
 8000280:	4b16      	ldr	r3, [pc, #88]	; (80002dc <main+0x190>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	2220      	movs	r2, #32
 8000286:	4910      	ldr	r1, [pc, #64]	; (80002c8 <main+0x17c>)
 8000288:	4618      	mov	r0, r3
 800028a:	f003 fe73 	bl	8003f74 <itoa>
	  ST7735_WriteString(5, 60, str, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800028e:	4b0f      	ldr	r3, [pc, #60]	; (80002cc <main+0x180>)
 8000290:	2200      	movs	r2, #0
 8000292:	9202      	str	r2, [sp, #8]
 8000294:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000298:	9201      	str	r2, [sp, #4]
 800029a:	685a      	ldr	r2, [r3, #4]
 800029c:	9200      	str	r2, [sp, #0]
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a09      	ldr	r2, [pc, #36]	; (80002c8 <main+0x17c>)
 80002a2:	213c      	movs	r1, #60	; 0x3c
 80002a4:	2005      	movs	r0, #5
 80002a6:	f000 fbc2 	bl	8000a2e <ST7735_WriteString>
	  HAL_Delay(100);
 80002aa:	2064      	movs	r0, #100	; 0x64
 80002ac:	f000 fe64 	bl	8000f78 <HAL_Delay>
	  itoa(time, str, 10);
 80002b0:	e78a      	b.n	80001c8 <main+0x7c>
 80002b2:	bf00      	nop
 80002b4:	20000038 	.word	0x20000038
 80002b8:	200000d4 	.word	0x200000d4
 80002bc:	20000008 	.word	0x20000008
 80002c0:	0800406c 	.word	0x0800406c
 80002c4:	2000011c 	.word	0x2000011c
 80002c8:	2000012c 	.word	0x2000012c
 80002cc:	20000000 	.word	0x20000000
 80002d0:	20000124 	.word	0x20000124
 80002d4:	20000128 	.word	0x20000128
 80002d8:	40012400 	.word	0x40012400
 80002dc:	20000120 	.word	0x20000120

080002e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b094      	sub	sp, #80	; 0x50
 80002e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ea:	2228      	movs	r2, #40	; 0x28
 80002ec:	2100      	movs	r1, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f003 fe84 	bl	8003ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f4:	f107 0314 	add.w	r3, r7, #20
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
 80002fc:	605a      	str	r2, [r3, #4]
 80002fe:	609a      	str	r2, [r3, #8]
 8000300:	60da      	str	r2, [r3, #12]
 8000302:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000310:	2309      	movs	r3, #9
 8000312:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000314:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000318:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031e:	2301      	movs	r3, #1
 8000320:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000322:	2301      	movs	r3, #1
 8000324:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000326:	2302      	movs	r3, #2
 8000328:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800032a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800032e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000330:	2300      	movs	r3, #0
 8000332:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000334:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000338:	4618      	mov	r0, r3
 800033a:	f001 fe43 	bl	8001fc4 <HAL_RCC_OscConfig>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000344:	f000 f9fc 	bl	8000740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000348:	230f      	movs	r3, #15
 800034a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800034c:	2302      	movs	r3, #2
 800034e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000350:	2300      	movs	r3, #0
 8000352:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000358:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800035e:	f107 0314 	add.w	r3, r7, #20
 8000362:	2100      	movs	r1, #0
 8000364:	4618      	mov	r0, r3
 8000366:	f002 f8af 	bl	80024c8 <HAL_RCC_ClockConfig>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000370:	f000 f9e6 	bl	8000740 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000374:	2303      	movs	r3, #3
 8000376:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800037c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800037e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000382:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	4618      	mov	r0, r3
 8000388:	f002 fa18 	bl	80027bc <HAL_RCCEx_PeriphCLKConfig>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000392:	f000 f9d5 	bl	8000740 <Error_Handler>
  }
}
 8000396:	bf00      	nop
 8000398:	3750      	adds	r7, #80	; 0x50
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
	...

080003a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b088      	sub	sp, #32
 80003a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
 80003ae:	609a      	str	r2, [r3, #8]
 80003b0:	60da      	str	r2, [r3, #12]
 80003b2:	611a      	str	r2, [r3, #16]
 80003b4:	615a      	str	r2, [r3, #20]
 80003b6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003b8:	4b2e      	ldr	r3, [pc, #184]	; (8000474 <MX_ADC1_Init+0xd4>)
 80003ba:	4a2f      	ldr	r2, [pc, #188]	; (8000478 <MX_ADC1_Init+0xd8>)
 80003bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003be:	4b2d      	ldr	r3, [pc, #180]	; (8000474 <MX_ADC1_Init+0xd4>)
 80003c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003c6:	4b2b      	ldr	r3, [pc, #172]	; (8000474 <MX_ADC1_Init+0xd4>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003cc:	4b29      	ldr	r3, [pc, #164]	; (8000474 <MX_ADC1_Init+0xd4>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003d2:	4b28      	ldr	r3, [pc, #160]	; (8000474 <MX_ADC1_Init+0xd4>)
 80003d4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003da:	4b26      	ldr	r3, [pc, #152]	; (8000474 <MX_ADC1_Init+0xd4>)
 80003dc:	2200      	movs	r2, #0
 80003de:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80003e0:	4b24      	ldr	r3, [pc, #144]	; (8000474 <MX_ADC1_Init+0xd4>)
 80003e2:	2201      	movs	r2, #1
 80003e4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003e6:	4823      	ldr	r0, [pc, #140]	; (8000474 <MX_ADC1_Init+0xd4>)
 80003e8:	f000 fdea 	bl	8000fc0 <HAL_ADC_Init>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_ADC1_Init+0x56>
  {
    Error_Handler();
 80003f2:	f000 f9a5 	bl	8000740 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 80003f6:	2300      	movs	r3, #0
 80003f8:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80003fa:	2301      	movs	r3, #1
 80003fc:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedNbrOfConversion = 2;
 80003fe:	2302      	movs	r3, #2
 8000400:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000402:	2300      	movs	r3, #0
 8000404:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000406:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800040a:	61fb      	str	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800040c:	2300      	movs	r3, #0
 800040e:	767b      	strb	r3, [r7, #25]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000410:	2300      	movs	r3, #0
 8000412:	763b      	strb	r3, [r7, #24]
  sConfigInjected.InjectedOffset = 0;
 8000414:	2300      	movs	r3, #0
 8000416:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	4619      	mov	r1, r3
 800041c:	4815      	ldr	r0, [pc, #84]	; (8000474 <MX_ADC1_Init+0xd4>)
 800041e:	f001 f981 	bl	8001724 <HAL_ADCEx_InjectedConfigChannel>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000428:	f000 f98a 	bl	8000740 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 800042c:	2301      	movs	r3, #1
 800042e:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000430:	2302      	movs	r3, #2
 8000432:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	4619      	mov	r1, r3
 8000438:	480e      	ldr	r0, [pc, #56]	; (8000474 <MX_ADC1_Init+0xd4>)
 800043a:	f001 f973 	bl	8001724 <HAL_ADCEx_InjectedConfigChannel>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000444:	f000 f97c 	bl	8000740 <Error_Handler>
  When using scan mode, DMA bit must be set and the direct memory access controller is
  used to transfer the converted data of regular group channels to SRAM after each update of
  the ADC_DR register.
  *///ADC1->CR2|= 1<<8;//Bit 8 DMA: Direct memory access mode

  ADC1->CR2 &= ~ADC_CR2_ADON; // запретить АЦП
 8000448:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <MX_ADC1_Init+0xd8>)
 800044a:	689b      	ldr	r3, [r3, #8]
 800044c:	4a0a      	ldr	r2, [pc, #40]	; (8000478 <MX_ADC1_Init+0xd8>)
 800044e:	f023 0301 	bic.w	r3, r3, #1
 8000452:	6093      	str	r3, [r2, #8]

  ADC1->CR1|=1<<7; //JEOCIE: Interrupt enable for injected channels
 8000454:	4b08      	ldr	r3, [pc, #32]	; (8000478 <MX_ADC1_Init+0xd8>)
 8000456:	685b      	ldr	r3, [r3, #4]
 8000458:	4a07      	ldr	r2, [pc, #28]	; (8000478 <MX_ADC1_Init+0xd8>)
 800045a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800045e:	6053      	str	r3, [r2, #4]

  ADC1->CR2 |= ADC_CR2_ADON; // разрешить АЦП
 8000460:	4b05      	ldr	r3, [pc, #20]	; (8000478 <MX_ADC1_Init+0xd8>)
 8000462:	689b      	ldr	r3, [r3, #8]
 8000464:	4a04      	ldr	r2, [pc, #16]	; (8000478 <MX_ADC1_Init+0xd8>)
 8000466:	f043 0301 	orr.w	r3, r3, #1
 800046a:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC1_Init 2 */

}
 800046c:	bf00      	nop
 800046e:	3720      	adds	r7, #32
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	20000038 	.word	0x20000038
 8000478:	40012400 	.word	0x40012400

0800047c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	2100      	movs	r1, #0
 8000486:	460a      	mov	r2, r1
 8000488:	801a      	strh	r2, [r3, #0]
 800048a:	460a      	mov	r2, r1
 800048c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800048e:	2300      	movs	r3, #0
 8000490:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000492:	4b1f      	ldr	r3, [pc, #124]	; (8000510 <MX_RTC_Init+0x94>)
 8000494:	4a1f      	ldr	r2, [pc, #124]	; (8000514 <MX_RTC_Init+0x98>)
 8000496:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000498:	4b1d      	ldr	r3, [pc, #116]	; (8000510 <MX_RTC_Init+0x94>)
 800049a:	f04f 32ff 	mov.w	r2, #4294967295
 800049e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80004a0:	4b1b      	ldr	r3, [pc, #108]	; (8000510 <MX_RTC_Init+0x94>)
 80004a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004a6:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80004a8:	4819      	ldr	r0, [pc, #100]	; (8000510 <MX_RTC_Init+0x94>)
 80004aa:	f002 faf3 	bl	8002a94 <HAL_RTC_Init>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80004b4:	f000 f944 	bl	8000740 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80004bc:	2300      	movs	r3, #0
 80004be:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	2201      	movs	r2, #1
 80004c8:	4619      	mov	r1, r3
 80004ca:	4811      	ldr	r0, [pc, #68]	; (8000510 <MX_RTC_Init+0x94>)
 80004cc:	f002 fb6e 	bl	8002bac <HAL_RTC_SetTime>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80004d6:	f000 f933 	bl	8000740 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80004da:	2301      	movs	r3, #1
 80004dc:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80004de:	2301      	movs	r3, #1
 80004e0:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 80004e2:	2301      	movs	r3, #1
 80004e4:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80004ea:	463b      	mov	r3, r7
 80004ec:	2201      	movs	r2, #1
 80004ee:	4619      	mov	r1, r3
 80004f0:	4807      	ldr	r0, [pc, #28]	; (8000510 <MX_RTC_Init+0x94>)
 80004f2:	f002 fbf3 	bl	8002cdc <HAL_RTC_SetDate>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80004fc:	f000 f920 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTCEx_SetSecond_IT(&hrtc);
 8000500:	4803      	ldr	r0, [pc, #12]	; (8000510 <MX_RTC_Init+0x94>)
 8000502:	f002 fe4b 	bl	800319c <HAL_RTCEx_SetSecond_IT>
  /* USER CODE END RTC_Init 2 */

}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20000068 	.word	0x20000068
 8000514:	40002800 	.word	0x40002800

08000518 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800051c:	4b17      	ldr	r3, [pc, #92]	; (800057c <MX_SPI1_Init+0x64>)
 800051e:	4a18      	ldr	r2, [pc, #96]	; (8000580 <MX_SPI1_Init+0x68>)
 8000520:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000522:	4b16      	ldr	r3, [pc, #88]	; (800057c <MX_SPI1_Init+0x64>)
 8000524:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000528:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800052a:	4b14      	ldr	r3, [pc, #80]	; (800057c <MX_SPI1_Init+0x64>)
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <MX_SPI1_Init+0x64>)
 8000532:	2200      	movs	r2, #0
 8000534:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000536:	4b11      	ldr	r3, [pc, #68]	; (800057c <MX_SPI1_Init+0x64>)
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800053c:	4b0f      	ldr	r3, [pc, #60]	; (800057c <MX_SPI1_Init+0x64>)
 800053e:	2200      	movs	r2, #0
 8000540:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000542:	4b0e      	ldr	r3, [pc, #56]	; (800057c <MX_SPI1_Init+0x64>)
 8000544:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000548:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800054a:	4b0c      	ldr	r3, [pc, #48]	; (800057c <MX_SPI1_Init+0x64>)
 800054c:	2210      	movs	r2, #16
 800054e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000550:	4b0a      	ldr	r3, [pc, #40]	; (800057c <MX_SPI1_Init+0x64>)
 8000552:	2200      	movs	r2, #0
 8000554:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000556:	4b09      	ldr	r3, [pc, #36]	; (800057c <MX_SPI1_Init+0x64>)
 8000558:	2200      	movs	r2, #0
 800055a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800055c:	4b07      	ldr	r3, [pc, #28]	; (800057c <MX_SPI1_Init+0x64>)
 800055e:	2200      	movs	r2, #0
 8000560:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000562:	4b06      	ldr	r3, [pc, #24]	; (800057c <MX_SPI1_Init+0x64>)
 8000564:	220a      	movs	r2, #10
 8000566:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000568:	4804      	ldr	r0, [pc, #16]	; (800057c <MX_SPI1_Init+0x64>)
 800056a:	f002 fe80 	bl	800326e <HAL_SPI_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000574:	f000 f8e4 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}
 800057c:	2000007c 	.word	0x2000007c
 8000580:	40013000 	.word	0x40013000

08000584 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800058a:	f107 0308 	add.w	r3, r7, #8
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000598:	463b      	mov	r3, r7
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005a0:	4b21      	ldr	r3, [pc, #132]	; (8000628 <MX_TIM1_Init+0xa4>)
 80005a2:	4a22      	ldr	r2, [pc, #136]	; (800062c <MX_TIM1_Init+0xa8>)
 80005a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 80005a6:	4b20      	ldr	r3, [pc, #128]	; (8000628 <MX_TIM1_Init+0xa4>)
 80005a8:	2207      	movs	r2, #7
 80005aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ac:	4b1e      	ldr	r3, [pc, #120]	; (8000628 <MX_TIM1_Init+0xa4>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80005b2:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <MX_TIM1_Init+0xa4>)
 80005b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ba:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <MX_TIM1_Init+0xa4>)
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005c0:	4b19      	ldr	r3, [pc, #100]	; (8000628 <MX_TIM1_Init+0xa4>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c6:	4b18      	ldr	r3, [pc, #96]	; (8000628 <MX_TIM1_Init+0xa4>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005cc:	4816      	ldr	r0, [pc, #88]	; (8000628 <MX_TIM1_Init+0xa4>)
 80005ce:	f003 f8bb 	bl	8003748 <HAL_TIM_Base_Init>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80005d8:	f000 f8b2 	bl	8000740 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005e2:	f107 0308 	add.w	r3, r7, #8
 80005e6:	4619      	mov	r1, r3
 80005e8:	480f      	ldr	r0, [pc, #60]	; (8000628 <MX_TIM1_Init+0xa4>)
 80005ea:	f003 fa57 	bl	8003a9c <HAL_TIM_ConfigClockSource>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80005f4:	f000 f8a4 	bl	8000740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f8:	2300      	movs	r3, #0
 80005fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000600:	463b      	mov	r3, r7
 8000602:	4619      	mov	r1, r3
 8000604:	4808      	ldr	r0, [pc, #32]	; (8000628 <MX_TIM1_Init+0xa4>)
 8000606:	f003 fc2d 	bl	8003e64 <HAL_TIMEx_MasterConfigSynchronization>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000610:	f000 f896 	bl	8000740 <Error_Handler>
    Buffered registers are then loaded with their preload values.
    1: UEV disabled. The Update event is not generated, shadow registers keep their value
    (ARR, PSC, CCRx). However the counter and the prescaler are reinitialized if the UG bit is
    set or if a hardware reset is received from the slave mode controller.
    */
    TIM1->CR1&= ~(1 << 1); //set the UDIS bit to ZERO (to generate UPDATE events) it ANDs data&111...1101
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <MX_TIM1_Init+0xa8>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a04      	ldr	r2, [pc, #16]	; (800062c <MX_TIM1_Init+0xa8>)
 800061a:	f023 0302 	bic.w	r3, r3, #2
 800061e:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM1_Init 2 */

}
 8000620:	bf00      	nop
 8000622:	3718      	adds	r7, #24
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	200000d4 	.word	0x200000d4
 800062c:	40012c00 	.word	0x40012c00

08000630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 0310 	add.w	r3, r7, #16
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000644:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <MX_GPIO_Init+0xc0>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a29      	ldr	r2, [pc, #164]	; (80006f0 <MX_GPIO_Init+0xc0>)
 800064a:	f043 0310 	orr.w	r3, r3, #16
 800064e:	6193      	str	r3, [r2, #24]
 8000650:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <MX_GPIO_Init+0xc0>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f003 0310 	and.w	r3, r3, #16
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800065c:	4b24      	ldr	r3, [pc, #144]	; (80006f0 <MX_GPIO_Init+0xc0>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	4a23      	ldr	r2, [pc, #140]	; (80006f0 <MX_GPIO_Init+0xc0>)
 8000662:	f043 0320 	orr.w	r3, r3, #32
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <MX_GPIO_Init+0xc0>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f003 0320 	and.w	r3, r3, #32
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000674:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <MX_GPIO_Init+0xc0>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a1d      	ldr	r2, [pc, #116]	; (80006f0 <MX_GPIO_Init+0xc0>)
 800067a:	f043 0304 	orr.w	r3, r3, #4
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <MX_GPIO_Init+0xc0>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f003 0304 	and.w	r3, r3, #4
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <MX_GPIO_Init+0xc0>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a17      	ldr	r2, [pc, #92]	; (80006f0 <MX_GPIO_Init+0xc0>)
 8000692:	f043 0308 	orr.w	r3, r3, #8
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <MX_GPIO_Init+0xc0>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0308 	and.w	r3, r3, #8
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 80006aa:	4812      	ldr	r0, [pc, #72]	; (80006f4 <MX_GPIO_Init+0xc4>)
 80006ac:	f001 fc66 	bl	8001f7c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 80006b0:	2304      	movs	r3, #4
 80006b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006b8:	2301      	movs	r3, #1
 80006ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	4619      	mov	r1, r3
 80006c2:	480d      	ldr	r0, [pc, #52]	; (80006f8 <MX_GPIO_Init+0xc8>)
 80006c4:	f001 fad6 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80006c8:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80006cc:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ce:	2301      	movs	r3, #1
 80006d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d6:	2302      	movs	r3, #2
 80006d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006da:	f107 0310 	add.w	r3, r7, #16
 80006de:	4619      	mov	r1, r3
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_GPIO_Init+0xc4>)
 80006e2:	f001 fac7 	bl	8001c74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006e6:	bf00      	nop
 80006e8:	3720      	adds	r7, #32
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40021000 	.word	0x40021000
 80006f4:	40010c00 	.word	0x40010c00
 80006f8:	40010800 	.word	0x40010800

080006fc <HAL_RTCEx_RTCEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc){
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	time=time+1;
 8000704:	4b04      	ldr	r3, [pc, #16]	; (8000718 <HAL_RTCEx_RTCEventCallback+0x1c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	3301      	adds	r3, #1
 800070a:	4a03      	ldr	r2, [pc, #12]	; (8000718 <HAL_RTCEx_RTCEventCallback+0x1c>)
 800070c:	6013      	str	r3, [r2, #0]
}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr
 8000718:	2000011c 	.word	0x2000011c

0800071c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	conversion starts. It starts a conversion of a group of regular channels if SWSTART is
	selected as trigger event by the EXTSEL[2:0] bits. that's true as set in MX Cube
	0: Reset state
	1: Starts conversion of regular channels
	 */
	ADC1->CR2|=1 << 21; //JSWSTART: Start conversion of injected channels
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	4a04      	ldr	r2, [pc, #16]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800072a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800072e:	6093      	str	r3, [r2, #8]
	//then wait ConvCpltCallback (EOCIE is set in MX_ADC1_Init)
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	40012400 	.word	0x40012400

08000740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000744:	b672      	cpsid	i
}
 8000746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000748:	e7fe      	b.n	8000748 <Error_Handler+0x8>
	...

0800074c <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000756:	4802      	ldr	r0, [pc, #8]	; (8000760 <ST7735_Select+0x14>)
 8000758:	f001 fc10 	bl	8001f7c <HAL_GPIO_WritePin>
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40010c00 	.word	0x40010c00

08000764 <ST7735_Unselect>:

void ST7735_Unselect() {
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000768:	2201      	movs	r2, #1
 800076a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800076e:	4802      	ldr	r0, [pc, #8]	; (8000778 <ST7735_Unselect+0x14>)
 8000770:	f001 fc04 	bl	8001f7c <HAL_GPIO_WritePin>
}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40010c00 	.word	0x40010c00

0800077c <ST7735_Reset>:

static void ST7735_Reset() {
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	2180      	movs	r1, #128	; 0x80
 8000784:	4806      	ldr	r0, [pc, #24]	; (80007a0 <ST7735_Reset+0x24>)
 8000786:	f001 fbf9 	bl	8001f7c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800078a:	2005      	movs	r0, #5
 800078c:	f000 fbf4 	bl	8000f78 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000790:	2201      	movs	r2, #1
 8000792:	2180      	movs	r1, #128	; 0x80
 8000794:	4802      	ldr	r0, [pc, #8]	; (80007a0 <ST7735_Reset+0x24>)
 8000796:	f001 fbf1 	bl	8001f7c <HAL_GPIO_WritePin>
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40010c00 	.word	0x40010c00

080007a4 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007b4:	4806      	ldr	r0, [pc, #24]	; (80007d0 <ST7735_WriteCommand+0x2c>)
 80007b6:	f001 fbe1 	bl	8001f7c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80007ba:	1df9      	adds	r1, r7, #7
 80007bc:	f04f 33ff 	mov.w	r3, #4294967295
 80007c0:	2201      	movs	r2, #1
 80007c2:	4804      	ldr	r0, [pc, #16]	; (80007d4 <ST7735_WriteCommand+0x30>)
 80007c4:	f002 fdd7 	bl	8003376 <HAL_SPI_Transmit>
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40010c00 	.word	0x40010c00
 80007d4:	2000007c 	.word	0x2000007c

080007d8 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80007e2:	2201      	movs	r2, #1
 80007e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007e8:	4807      	ldr	r0, [pc, #28]	; (8000808 <ST7735_WriteData+0x30>)
 80007ea:	f001 fbc7 	bl	8001f7c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	f04f 33ff 	mov.w	r3, #4294967295
 80007f6:	6879      	ldr	r1, [r7, #4]
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <ST7735_WriteData+0x34>)
 80007fa:	f002 fdbc 	bl	8003376 <HAL_SPI_Transmit>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40010c00 	.word	0x40010c00
 800080c:	2000007c 	.word	0x2000007c

08000810 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	1c5a      	adds	r2, r3, #1
 800081c:	607a      	str	r2, [r7, #4]
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000822:	e034      	b.n	800088e <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	1c5a      	adds	r2, r3, #1
 8000828:	607a      	str	r2, [r7, #4]
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800082e:	7afb      	ldrb	r3, [r7, #11]
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ffb7 	bl	80007a4 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	1c5a      	adds	r2, r3, #1
 800083a:	607a      	str	r2, [r7, #4]
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000840:	7abb      	ldrb	r3, [r7, #10]
 8000842:	b29b      	uxth	r3, r3
 8000844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000848:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800084a:	7abb      	ldrb	r3, [r7, #10]
 800084c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000850:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000852:	7abb      	ldrb	r3, [r7, #10]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d008      	beq.n	800086a <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000858:	7abb      	ldrb	r3, [r7, #10]
 800085a:	4619      	mov	r1, r3
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff ffbb 	bl	80007d8 <ST7735_WriteData>
            addr += numArgs;
 8000862:	7abb      	ldrb	r3, [r7, #10]
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	4413      	add	r3, r2
 8000868:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800086a:	89bb      	ldrh	r3, [r7, #12]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d00e      	beq.n	800088e <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	1c5a      	adds	r2, r3, #1
 8000874:	607a      	str	r2, [r7, #4]
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800087a:	89bb      	ldrh	r3, [r7, #12]
 800087c:	2bff      	cmp	r3, #255	; 0xff
 800087e:	d102      	bne.n	8000886 <ST7735_ExecuteCommandList+0x76>
 8000880:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000884:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000886:	89bb      	ldrh	r3, [r7, #12]
 8000888:	4618      	mov	r0, r3
 800088a:	f000 fb75 	bl	8000f78 <HAL_Delay>
    while(numCommands--) {
 800088e:	7bfb      	ldrb	r3, [r7, #15]
 8000890:	1e5a      	subs	r2, r3, #1
 8000892:	73fa      	strb	r2, [r7, #15]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d1c5      	bne.n	8000824 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000898:	bf00      	nop
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 80008a2:	b590      	push	{r4, r7, lr}
 80008a4:	b085      	sub	sp, #20
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	4604      	mov	r4, r0
 80008aa:	4608      	mov	r0, r1
 80008ac:	4611      	mov	r1, r2
 80008ae:	461a      	mov	r2, r3
 80008b0:	4623      	mov	r3, r4
 80008b2:	71fb      	strb	r3, [r7, #7]
 80008b4:	4603      	mov	r3, r0
 80008b6:	71bb      	strb	r3, [r7, #6]
 80008b8:	460b      	mov	r3, r1
 80008ba:	717b      	strb	r3, [r7, #5]
 80008bc:	4613      	mov	r3, r2
 80008be:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80008c0:	202a      	movs	r0, #42	; 0x2a
 80008c2:	f7ff ff6f 	bl	80007a4 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80008c6:	2300      	movs	r3, #0
 80008c8:	733b      	strb	r3, [r7, #12]
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	737b      	strb	r3, [r7, #13]
 80008ce:	2300      	movs	r3, #0
 80008d0:	73bb      	strb	r3, [r7, #14]
 80008d2:	797b      	ldrb	r3, [r7, #5]
 80008d4:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	2104      	movs	r1, #4
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ff7b 	bl	80007d8 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80008e2:	202b      	movs	r0, #43	; 0x2b
 80008e4:	f7ff ff5e 	bl	80007a4 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80008e8:	79bb      	ldrb	r3, [r7, #6]
 80008ea:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80008ec:	793b      	ldrb	r3, [r7, #4]
 80008ee:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	2104      	movs	r1, #4
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff ff6e 	bl	80007d8 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80008fc:	202c      	movs	r0, #44	; 0x2c
 80008fe:	f7ff ff51 	bl	80007a4 <ST7735_WriteCommand>
}
 8000902:	bf00      	nop
 8000904:	3714      	adds	r7, #20
 8000906:	46bd      	mov	sp, r7
 8000908:	bd90      	pop	{r4, r7, pc}
	...

0800090c <ST7735_Init>:

void ST7735_Init() {
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
    ST7735_Select();
 8000910:	f7ff ff1c 	bl	800074c <ST7735_Select>
    ST7735_Reset();
 8000914:	f7ff ff32 	bl	800077c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000918:	4806      	ldr	r0, [pc, #24]	; (8000934 <ST7735_Init+0x28>)
 800091a:	f7ff ff79 	bl	8000810 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <ST7735_Init+0x2c>)
 8000920:	f7ff ff76 	bl	8000810 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000924:	4805      	ldr	r0, [pc, #20]	; (800093c <ST7735_Init+0x30>)
 8000926:	f7ff ff73 	bl	8000810 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 800092a:	f7ff ff1b 	bl	8000764 <ST7735_Unselect>
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	08005564 	.word	0x08005564
 8000938:	080055a0 	.word	0x080055a0
 800093c:	080055b0 	.word	0x080055b0

08000940 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000940:	b082      	sub	sp, #8
 8000942:	b590      	push	{r4, r7, lr}
 8000944:	b089      	sub	sp, #36	; 0x24
 8000946:	af00      	add	r7, sp, #0
 8000948:	637b      	str	r3, [r7, #52]	; 0x34
 800094a:	4603      	mov	r3, r0
 800094c:	80fb      	strh	r3, [r7, #6]
 800094e:	460b      	mov	r3, r1
 8000950:	80bb      	strh	r3, [r7, #4]
 8000952:	4613      	mov	r3, r2
 8000954:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	b2d8      	uxtb	r0, r3
 800095a:	88bb      	ldrh	r3, [r7, #4]
 800095c:	b2d9      	uxtb	r1, r3
 800095e:	88fb      	ldrh	r3, [r7, #6]
 8000960:	b2da      	uxtb	r2, r3
 8000962:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000966:	4413      	add	r3, r2
 8000968:	b2db      	uxtb	r3, r3
 800096a:	3b01      	subs	r3, #1
 800096c:	b2dc      	uxtb	r4, r3
 800096e:	88bb      	ldrh	r3, [r7, #4]
 8000970:	b2da      	uxtb	r2, r3
 8000972:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000976:	4413      	add	r3, r2
 8000978:	b2db      	uxtb	r3, r3
 800097a:	3b01      	subs	r3, #1
 800097c:	b2db      	uxtb	r3, r3
 800097e:	4622      	mov	r2, r4
 8000980:	f7ff ff8f 	bl	80008a2 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
 8000988:	e043      	b.n	8000a12 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800098a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800098c:	78fb      	ldrb	r3, [r7, #3]
 800098e:	3b20      	subs	r3, #32
 8000990:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000994:	fb01 f303 	mul.w	r3, r1, r3
 8000998:	4619      	mov	r1, r3
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	440b      	add	r3, r1
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	4413      	add	r3, r2
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80009a6:	2300      	movs	r3, #0
 80009a8:	61bb      	str	r3, [r7, #24]
 80009aa:	e029      	b.n	8000a00 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80009ac:	697a      	ldr	r2, [r7, #20]
 80009ae:	69bb      	ldr	r3, [r7, #24]
 80009b0:	fa02 f303 	lsl.w	r3, r2, r3
 80009b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d00e      	beq.n	80009da <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80009bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80009be:	0a1b      	lsrs	r3, r3, #8
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	743b      	strb	r3, [r7, #16]
 80009c6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80009cc:	f107 0310 	add.w	r3, r7, #16
 80009d0:	2102      	movs	r1, #2
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff ff00 	bl	80007d8 <ST7735_WriteData>
 80009d8:	e00f      	b.n	80009fa <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80009da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80009de:	0a1b      	lsrs	r3, r3, #8
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	733b      	strb	r3, [r7, #12]
 80009e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	2102      	movs	r1, #2
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff feef 	bl	80007d8 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80009fa:	69bb      	ldr	r3, [r7, #24]
 80009fc:	3301      	adds	r3, #1
 80009fe:	61bb      	str	r3, [r7, #24]
 8000a00:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000a04:	461a      	mov	r2, r3
 8000a06:	69bb      	ldr	r3, [r7, #24]
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d3cf      	bcc.n	80009ac <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	61fb      	str	r3, [r7, #28]
 8000a12:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000a16:	461a      	mov	r2, r3
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d3b5      	bcc.n	800098a <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000a1e:	bf00      	nop
 8000a20:	bf00      	nop
 8000a22:	3724      	adds	r7, #36	; 0x24
 8000a24:	46bd      	mov	sp, r7
 8000a26:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000a2a:	b002      	add	sp, #8
 8000a2c:	4770      	bx	lr

08000a2e <ST7735_WriteString>:
}
*/



void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000a2e:	b082      	sub	sp, #8
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af04      	add	r7, sp, #16
 8000a36:	603a      	str	r2, [r7, #0]
 8000a38:	617b      	str	r3, [r7, #20]
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	80fb      	strh	r3, [r7, #6]
 8000a3e:	460b      	mov	r3, r1
 8000a40:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000a42:	f7ff fe83 	bl	800074c <ST7735_Select>

    while(*str) {
 8000a46:	e02d      	b.n	8000aa4 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8000a48:	88fb      	ldrh	r3, [r7, #6]
 8000a4a:	7d3a      	ldrb	r2, [r7, #20]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	2b7f      	cmp	r3, #127	; 0x7f
 8000a50:	dd13      	ble.n	8000a7a <ST7735_WriteString+0x4c>
            x = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000a56:	7d7b      	ldrb	r3, [r7, #21]
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	88bb      	ldrh	r3, [r7, #4]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8000a60:	88bb      	ldrh	r3, [r7, #4]
 8000a62:	7d7a      	ldrb	r2, [r7, #21]
 8000a64:	4413      	add	r3, r2
 8000a66:	2b9f      	cmp	r3, #159	; 0x9f
 8000a68:	dc21      	bgt.n	8000aae <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b20      	cmp	r3, #32
 8000a70:	d103      	bne.n	8000a7a <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	3301      	adds	r3, #1
 8000a76:	603b      	str	r3, [r7, #0]
                continue;
 8000a78:	e014      	b.n	8000aa4 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	781a      	ldrb	r2, [r3, #0]
 8000a7e:	88b9      	ldrh	r1, [r7, #4]
 8000a80:	88f8      	ldrh	r0, [r7, #6]
 8000a82:	8c3b      	ldrh	r3, [r7, #32]
 8000a84:	9302      	str	r3, [sp, #8]
 8000a86:	8bbb      	ldrh	r3, [r7, #28]
 8000a88:	9301      	str	r3, [sp, #4]
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	f7ff ff56 	bl	8000940 <ST7735_WriteChar>
        x += font.width;
 8000a94:	7d3b      	ldrb	r3, [r7, #20]
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	88fb      	ldrh	r3, [r7, #6]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	80fb      	strh	r3, [r7, #6]
        str++;
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d1cd      	bne.n	8000a48 <ST7735_WriteString+0x1a>
 8000aac:	e000      	b.n	8000ab0 <ST7735_WriteString+0x82>
                break;
 8000aae:	bf00      	nop
    }

    ST7735_Unselect();
 8000ab0:	f7ff fe58 	bl	8000764 <ST7735_Unselect>
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000abe:	b002      	add	sp, #8
 8000ac0:	4770      	bx	lr
	...

08000ac4 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000ac4:	b590      	push	{r4, r7, lr}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4604      	mov	r4, r0
 8000acc:	4608      	mov	r0, r1
 8000ace:	4611      	mov	r1, r2
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4623      	mov	r3, r4
 8000ad4:	80fb      	strh	r3, [r7, #6]
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	80bb      	strh	r3, [r7, #4]
 8000ada:	460b      	mov	r3, r1
 8000adc:	807b      	strh	r3, [r7, #2]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000ae2:	88fb      	ldrh	r3, [r7, #6]
 8000ae4:	2b7f      	cmp	r3, #127	; 0x7f
 8000ae6:	d858      	bhi.n	8000b9a <ST7735_FillRectangle+0xd6>
 8000ae8:	88bb      	ldrh	r3, [r7, #4]
 8000aea:	2b9f      	cmp	r3, #159	; 0x9f
 8000aec:	d855      	bhi.n	8000b9a <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000aee:	88fa      	ldrh	r2, [r7, #6]
 8000af0:	887b      	ldrh	r3, [r7, #2]
 8000af2:	4413      	add	r3, r2
 8000af4:	2b80      	cmp	r3, #128	; 0x80
 8000af6:	dd03      	ble.n	8000b00 <ST7735_FillRectangle+0x3c>
 8000af8:	88fb      	ldrh	r3, [r7, #6]
 8000afa:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000afe:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000b00:	88ba      	ldrh	r2, [r7, #4]
 8000b02:	883b      	ldrh	r3, [r7, #0]
 8000b04:	4413      	add	r3, r2
 8000b06:	2ba0      	cmp	r3, #160	; 0xa0
 8000b08:	dd03      	ble.n	8000b12 <ST7735_FillRectangle+0x4e>
 8000b0a:	88bb      	ldrh	r3, [r7, #4]
 8000b0c:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8000b10:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000b12:	f7ff fe1b 	bl	800074c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000b16:	88fb      	ldrh	r3, [r7, #6]
 8000b18:	b2d8      	uxtb	r0, r3
 8000b1a:	88bb      	ldrh	r3, [r7, #4]
 8000b1c:	b2d9      	uxtb	r1, r3
 8000b1e:	88fb      	ldrh	r3, [r7, #6]
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	887b      	ldrh	r3, [r7, #2]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	4413      	add	r3, r2
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	b2dc      	uxtb	r4, r3
 8000b2e:	88bb      	ldrh	r3, [r7, #4]
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	883b      	ldrh	r3, [r7, #0]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	4413      	add	r3, r2
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	4622      	mov	r2, r4
 8000b40:	f7ff feaf 	bl	80008a2 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000b44:	8c3b      	ldrh	r3, [r7, #32]
 8000b46:	0a1b      	lsrs	r3, r3, #8
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	733b      	strb	r3, [r7, #12]
 8000b4e:	8c3b      	ldrh	r3, [r7, #32]
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b5a:	4812      	ldr	r0, [pc, #72]	; (8000ba4 <ST7735_FillRectangle+0xe0>)
 8000b5c:	f001 fa0e 	bl	8001f7c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000b60:	883b      	ldrh	r3, [r7, #0]
 8000b62:	80bb      	strh	r3, [r7, #4]
 8000b64:	e013      	b.n	8000b8e <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 8000b66:	887b      	ldrh	r3, [r7, #2]
 8000b68:	80fb      	strh	r3, [r7, #6]
 8000b6a:	e00a      	b.n	8000b82 <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000b6c:	f107 010c 	add.w	r1, r7, #12
 8000b70:	f04f 33ff 	mov.w	r3, #4294967295
 8000b74:	2202      	movs	r2, #2
 8000b76:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <ST7735_FillRectangle+0xe4>)
 8000b78:	f002 fbfd 	bl	8003376 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000b7c:	88fb      	ldrh	r3, [r7, #6]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	80fb      	strh	r3, [r7, #6]
 8000b82:	88fb      	ldrh	r3, [r7, #6]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d1f1      	bne.n	8000b6c <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 8000b88:	88bb      	ldrh	r3, [r7, #4]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	80bb      	strh	r3, [r7, #4]
 8000b8e:	88bb      	ldrh	r3, [r7, #4]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d1e8      	bne.n	8000b66 <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 8000b94:	f7ff fde6 	bl	8000764 <ST7735_Unselect>
 8000b98:	e000      	b.n	8000b9c <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000b9a:	bf00      	nop
}
 8000b9c:	3714      	adds	r7, #20
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd90      	pop	{r4, r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40010c00 	.word	0x40010c00
 8000ba8:	2000007c 	.word	0x2000007c

08000bac <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af02      	add	r7, sp, #8
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8000bb6:	88fb      	ldrh	r3, [r7, #6]
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	23a0      	movs	r3, #160	; 0xa0
 8000bbc:	2280      	movs	r2, #128	; 0x80
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f7ff ff7f 	bl	8000ac4 <ST7735_FillRectangle>
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <HAL_MspInit+0x5c>)
 8000bd8:	699b      	ldr	r3, [r3, #24]
 8000bda:	4a14      	ldr	r2, [pc, #80]	; (8000c2c <HAL_MspInit+0x5c>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6193      	str	r3, [r2, #24]
 8000be2:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <HAL_MspInit+0x5c>)
 8000be4:	699b      	ldr	r3, [r3, #24]
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bee:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <HAL_MspInit+0x5c>)
 8000bf0:	69db      	ldr	r3, [r3, #28]
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <HAL_MspInit+0x5c>)
 8000bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf8:	61d3      	str	r3, [r2, #28]
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <HAL_MspInit+0x5c>)
 8000bfc:	69db      	ldr	r3, [r3, #28]
 8000bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <HAL_MspInit+0x60>)
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <HAL_MspInit+0x60>)
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c22:	bf00      	nop
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	40010000 	.word	0x40010000

08000c34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b088      	sub	sp, #32
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <HAL_ADC_MspInit+0x6c>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d121      	bne.n	8000c98 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c54:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <HAL_ADC_MspInit+0x70>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <HAL_ADC_MspInit+0x70>)
 8000c5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c5e:	6193      	str	r3, [r2, #24]
 8000c60:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <HAL_ADC_MspInit+0x70>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <HAL_ADC_MspInit+0x70>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	4a0c      	ldr	r2, [pc, #48]	; (8000ca4 <HAL_ADC_MspInit+0x70>)
 8000c72:	f043 0304 	orr.w	r3, r3, #4
 8000c76:	6193      	str	r3, [r2, #24]
 8000c78:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <HAL_ADC_MspInit+0x70>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	f003 0304 	and.w	r3, r3, #4
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = X_Pin|Y_Pin;
 8000c84:	2303      	movs	r3, #3
 8000c86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8c:	f107 0310 	add.w	r3, r7, #16
 8000c90:	4619      	mov	r1, r3
 8000c92:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <HAL_ADC_MspInit+0x74>)
 8000c94:	f000 ffee 	bl	8001c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c98:	bf00      	nop
 8000c9a:	3720      	adds	r7, #32
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40012400 	.word	0x40012400
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40010800 	.word	0x40010800

08000cac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0f      	ldr	r2, [pc, #60]	; (8000cf8 <HAL_RTC_MspInit+0x4c>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d118      	bne.n	8000cf0 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000cbe:	f001 f975 	bl	8001fac <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <HAL_RTC_MspInit+0x50>)
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	4a0d      	ldr	r2, [pc, #52]	; (8000cfc <HAL_RTC_MspInit+0x50>)
 8000cc8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ccc:	61d3      	str	r3, [r2, #28]
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <HAL_RTC_MspInit+0x50>)
 8000cd0:	69db      	ldr	r3, [r3, #28]
 8000cd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <HAL_RTC_MspInit+0x54>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f000 ff8e 	bl	8001c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000cea:	2003      	movs	r0, #3
 8000cec:	f000 ffa7 	bl	8001c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000cf0:	bf00      	nop
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40002800 	.word	0x40002800
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	4242043c 	.word	0x4242043c

08000d04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0310 	add.w	r3, r7, #16
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a1b      	ldr	r2, [pc, #108]	; (8000d8c <HAL_SPI_MspInit+0x88>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d12f      	bne.n	8000d84 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d24:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <HAL_SPI_MspInit+0x8c>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4a19      	ldr	r2, [pc, #100]	; (8000d90 <HAL_SPI_MspInit+0x8c>)
 8000d2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d2e:	6193      	str	r3, [r2, #24]
 8000d30:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <HAL_SPI_MspInit+0x8c>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3c:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <HAL_SPI_MspInit+0x8c>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4a13      	ldr	r2, [pc, #76]	; (8000d90 <HAL_SPI_MspInit+0x8c>)
 8000d42:	f043 0304 	orr.w	r3, r3, #4
 8000d46:	6193      	str	r3, [r2, #24]
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <HAL_SPI_MspInit+0x8c>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f003 0304 	and.w	r3, r3, #4
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000d54:	23a0      	movs	r3, #160	; 0xa0
 8000d56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d60:	f107 0310 	add.w	r3, r7, #16
 8000d64:	4619      	mov	r1, r3
 8000d66:	480b      	ldr	r0, [pc, #44]	; (8000d94 <HAL_SPI_MspInit+0x90>)
 8000d68:	f000 ff84 	bl	8001c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d6c:	2340      	movs	r3, #64	; 0x40
 8000d6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <HAL_SPI_MspInit+0x90>)
 8000d80:	f000 ff78 	bl	8001c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d84:	bf00      	nop
 8000d86:	3720      	adds	r7, #32
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40013000 	.word	0x40013000
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40010800 	.word	0x40010800

08000d98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0d      	ldr	r2, [pc, #52]	; (8000ddc <HAL_TIM_Base_MspInit+0x44>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d113      	bne.n	8000dd2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000daa:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <HAL_TIM_Base_MspInit+0x48>)
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	4a0c      	ldr	r2, [pc, #48]	; (8000de0 <HAL_TIM_Base_MspInit+0x48>)
 8000db0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000db4:	6193      	str	r3, [r2, #24]
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <HAL_TIM_Base_MspInit+0x48>)
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2019      	movs	r0, #25
 8000dc8:	f000 ff1d 	bl	8001c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000dcc:	2019      	movs	r0, #25
 8000dce:	f000 ff36 	bl	8001c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000dd2:	bf00      	nop
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40012c00 	.word	0x40012c00
 8000de0:	40021000 	.word	0x40021000

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <NMI_Handler+0x4>

08000dea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <HardFault_Handler+0x4>

08000df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <MemManage_Handler+0x4>

08000df6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <BusFault_Handler+0x4>

08000dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <UsageFault_Handler+0x4>

08000e02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr

08000e0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr

08000e1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr

08000e26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e2a:	f000 f889 	bl	8000f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8000e38:	4802      	ldr	r0, [pc, #8]	; (8000e44 <RTC_IRQHandler+0x10>)
 8000e3a:	f002 f9d8 	bl	80031ee <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000068 	.word	0x20000068

08000e48 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e4c:	4802      	ldr	r0, [pc, #8]	; (8000e58 <TIM1_UP_IRQHandler+0x10>)
 8000e4e:	f002 fd1d 	bl	800388c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	200000d4 	.word	0x200000d4

08000e5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr

08000e68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e68:	f7ff fff8 	bl	8000e5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e6c:	480b      	ldr	r0, [pc, #44]	; (8000e9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e6e:	490c      	ldr	r1, [pc, #48]	; (8000ea0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e70:	4a0c      	ldr	r2, [pc, #48]	; (8000ea4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e74:	e002      	b.n	8000e7c <LoopCopyDataInit>

08000e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7a:	3304      	adds	r3, #4

08000e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e80:	d3f9      	bcc.n	8000e76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e82:	4a09      	ldr	r2, [pc, #36]	; (8000ea8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e84:	4c09      	ldr	r4, [pc, #36]	; (8000eac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e88:	e001      	b.n	8000e8e <LoopFillZerobss>

08000e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e8c:	3204      	adds	r2, #4

08000e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e90:	d3fb      	bcc.n	8000e8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e92:	f003 f8bb 	bl	800400c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e96:	f7ff f959 	bl	800014c <main>
  bx lr
 8000e9a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000ea4:	08005648 	.word	0x08005648
  ldr r2, =_sbss
 8000ea8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000eac:	2000013c 	.word	0x2000013c

08000eb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eb0:	e7fe      	b.n	8000eb0 <ADC1_2_IRQHandler>
	...

08000eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <HAL_Init+0x28>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a07      	ldr	r2, [pc, #28]	; (8000edc <HAL_Init+0x28>)
 8000ebe:	f043 0310 	orr.w	r3, r3, #16
 8000ec2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec4:	2003      	movs	r0, #3
 8000ec6:	f000 fe93 	bl	8001bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eca:	200f      	movs	r0, #15
 8000ecc:	f000 f808 	bl	8000ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed0:	f7ff fe7e 	bl	8000bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40022000 	.word	0x40022000

08000ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_InitTick+0x54>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_InitTick+0x58>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 feab 	bl	8001c5a <HAL_SYSTICK_Config>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00e      	b.n	8000f2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b0f      	cmp	r3, #15
 8000f12:	d80a      	bhi.n	8000f2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f14:	2200      	movs	r2, #0
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f000 fe73 	bl	8001c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f20:	4a06      	ldr	r2, [pc, #24]	; (8000f3c <HAL_InitTick+0x5c>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	e000      	b.n	8000f2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000010 	.word	0x20000010
 8000f38:	20000018 	.word	0x20000018
 8000f3c:	20000014 	.word	0x20000014

08000f40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <HAL_IncTick+0x1c>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <HAL_IncTick+0x20>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4413      	add	r3, r2
 8000f50:	4a03      	ldr	r2, [pc, #12]	; (8000f60 <HAL_IncTick+0x20>)
 8000f52:	6013      	str	r3, [r2, #0]
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr
 8000f5c:	20000018 	.word	0x20000018
 8000f60:	20000138 	.word	0x20000138

08000f64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return uwTick;
 8000f68:	4b02      	ldr	r3, [pc, #8]	; (8000f74 <HAL_GetTick+0x10>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	20000138 	.word	0x20000138

08000f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f80:	f7ff fff0 	bl	8000f64 <HAL_GetTick>
 8000f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f90:	d005      	beq.n	8000f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <HAL_Delay+0x44>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f9e:	bf00      	nop
 8000fa0:	f7ff ffe0 	bl	8000f64 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d8f7      	bhi.n	8000fa0 <HAL_Delay+0x28>
  {
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000018 	.word	0x20000018

08000fc0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e0be      	b.n	8001160 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d109      	bne.n	8001004 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff fe18 	bl	8000c34 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f000 fa9d 	bl	8001544 <ADC_ConversionStop_Disable>
 800100a:	4603      	mov	r3, r0
 800100c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001012:	f003 0310 	and.w	r3, r3, #16
 8001016:	2b00      	cmp	r3, #0
 8001018:	f040 8099 	bne.w	800114e <HAL_ADC_Init+0x18e>
 800101c:	7dfb      	ldrb	r3, [r7, #23]
 800101e:	2b00      	cmp	r3, #0
 8001020:	f040 8095 	bne.w	800114e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001028:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800102c:	f023 0302 	bic.w	r3, r3, #2
 8001030:	f043 0202 	orr.w	r2, r3, #2
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001040:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	7b1b      	ldrb	r3, [r3, #12]
 8001046:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001048:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	4313      	orrs	r3, r2
 800104e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001058:	d003      	beq.n	8001062 <HAL_ADC_Init+0xa2>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d102      	bne.n	8001068 <HAL_ADC_Init+0xa8>
 8001062:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001066:	e000      	b.n	800106a <HAL_ADC_Init+0xaa>
 8001068:	2300      	movs	r3, #0
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	7d1b      	ldrb	r3, [r3, #20]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d119      	bne.n	80010ac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	7b1b      	ldrb	r3, [r3, #12]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d109      	bne.n	8001094 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	3b01      	subs	r3, #1
 8001086:	035a      	lsls	r2, r3, #13
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	e00b      	b.n	80010ac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001098:	f043 0220 	orr.w	r2, r3, #32
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a4:	f043 0201 	orr.w	r2, r3, #1
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	430a      	orrs	r2, r1
 80010be:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	689a      	ldr	r2, [r3, #8]
 80010c6:	4b28      	ldr	r3, [pc, #160]	; (8001168 <HAL_ADC_Init+0x1a8>)
 80010c8:	4013      	ands	r3, r2
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	6812      	ldr	r2, [r2, #0]
 80010ce:	68b9      	ldr	r1, [r7, #8]
 80010d0:	430b      	orrs	r3, r1
 80010d2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010dc:	d003      	beq.n	80010e6 <HAL_ADC_Init+0x126>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d104      	bne.n	80010f0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	691b      	ldr	r3, [r3, #16]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	051b      	lsls	r3, r3, #20
 80010ee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	430a      	orrs	r2, r1
 8001102:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	4b18      	ldr	r3, [pc, #96]	; (800116c <HAL_ADC_Init+0x1ac>)
 800110c:	4013      	ands	r3, r2
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	429a      	cmp	r2, r3
 8001112:	d10b      	bne.n	800112c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111e:	f023 0303 	bic.w	r3, r3, #3
 8001122:	f043 0201 	orr.w	r2, r3, #1
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800112a:	e018      	b.n	800115e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001130:	f023 0312 	bic.w	r3, r3, #18
 8001134:	f043 0210 	orr.w	r2, r3, #16
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001140:	f043 0201 	orr.w	r2, r3, #1
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800114c:	e007      	b.n	800115e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001152:	f043 0210 	orr.w	r2, r3, #16
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800115e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	ffe1f7fd 	.word	0xffe1f7fd
 800116c:	ff1f0efe 	.word	0xff1f0efe

08001170 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001178:	2300      	movs	r3, #0
 800117a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001182:	2b01      	cmp	r3, #1
 8001184:	d101      	bne.n	800118a <HAL_ADC_Start+0x1a>
 8001186:	2302      	movs	r3, #2
 8001188:	e098      	b.n	80012bc <HAL_ADC_Start+0x14c>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2201      	movs	r2, #1
 800118e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f000 f97c 	bl	8001490 <ADC_Enable>
 8001198:	4603      	mov	r3, r0
 800119a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f040 8087 	bne.w	80012b2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011ac:	f023 0301 	bic.w	r3, r3, #1
 80011b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a41      	ldr	r2, [pc, #260]	; (80012c4 <HAL_ADC_Start+0x154>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d105      	bne.n	80011ce <HAL_ADC_Start+0x5e>
 80011c2:	4b41      	ldr	r3, [pc, #260]	; (80012c8 <HAL_ADC_Start+0x158>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d115      	bne.n	80011fa <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d026      	beq.n	8001236 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011f8:	e01d      	b.n	8001236 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a2f      	ldr	r2, [pc, #188]	; (80012c8 <HAL_ADC_Start+0x158>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d004      	beq.n	800121a <HAL_ADC_Start+0xaa>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a2b      	ldr	r2, [pc, #172]	; (80012c4 <HAL_ADC_Start+0x154>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d10d      	bne.n	8001236 <HAL_ADC_Start+0xc6>
 800121a:	4b2b      	ldr	r3, [pc, #172]	; (80012c8 <HAL_ADC_Start+0x158>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001222:	2b00      	cmp	r3, #0
 8001224:	d007      	beq.n	8001236 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800122e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d006      	beq.n	8001250 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001246:	f023 0206 	bic.w	r2, r3, #6
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	62da      	str	r2, [r3, #44]	; 0x2c
 800124e:	e002      	b.n	8001256 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f06f 0202 	mvn.w	r2, #2
 8001266:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001272:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001276:	d113      	bne.n	80012a0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800127c:	4a11      	ldr	r2, [pc, #68]	; (80012c4 <HAL_ADC_Start+0x154>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d105      	bne.n	800128e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <HAL_ADC_Start+0x158>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800128a:	2b00      	cmp	r3, #0
 800128c:	d108      	bne.n	80012a0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	e00c      	b.n	80012ba <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	e003      	b.n	80012ba <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40012800 	.word	0x40012800
 80012c8:	40012400 	.word	0x40012400

080012cc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012d4:	2300      	movs	r3, #0
 80012d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d101      	bne.n	80012e6 <HAL_ADC_Stop+0x1a>
 80012e2:	2302      	movs	r3, #2
 80012e4:	e01a      	b.n	800131c <HAL_ADC_Stop+0x50>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2201      	movs	r2, #1
 80012ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 f928 	bl	8001544 <ADC_ConversionStop_Disable>
 80012f4:	4603      	mov	r3, r0
 80012f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d109      	bne.n	8001312 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001302:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001306:	f023 0301 	bic.w	r3, r3, #1
 800130a:	f043 0201 	orr.w	r2, r3, #1
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800131a:	7bfb      	ldrb	r3, [r7, #15]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800132c:	2300      	movs	r3, #0
 800132e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001336:	2b01      	cmp	r3, #1
 8001338:	d101      	bne.n	800133e <HAL_ADC_Start_IT+0x1a>
 800133a:	2302      	movs	r3, #2
 800133c:	e0a0      	b.n	8001480 <HAL_ADC_Start_IT+0x15c>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2201      	movs	r2, #1
 8001342:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 f8a2 	bl	8001490 <ADC_Enable>
 800134c:	4603      	mov	r3, r0
 800134e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	2b00      	cmp	r3, #0
 8001354:	f040 808f 	bne.w	8001476 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001360:	f023 0301 	bic.w	r3, r3, #1
 8001364:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a45      	ldr	r2, [pc, #276]	; (8001488 <HAL_ADC_Start_IT+0x164>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d105      	bne.n	8001382 <HAL_ADC_Start_IT+0x5e>
 8001376:	4b45      	ldr	r3, [pc, #276]	; (800148c <HAL_ADC_Start_IT+0x168>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d115      	bne.n	80013ae <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001386:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001398:	2b00      	cmp	r3, #0
 800139a:	d026      	beq.n	80013ea <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013ac:	e01d      	b.n	80013ea <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a33      	ldr	r2, [pc, #204]	; (800148c <HAL_ADC_Start_IT+0x168>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d004      	beq.n	80013ce <HAL_ADC_Start_IT+0xaa>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a2f      	ldr	r2, [pc, #188]	; (8001488 <HAL_ADC_Start_IT+0x164>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d10d      	bne.n	80013ea <HAL_ADC_Start_IT+0xc6>
 80013ce:	4b2f      	ldr	r3, [pc, #188]	; (800148c <HAL_ADC_Start_IT+0x168>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d007      	beq.n	80013ea <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d006      	beq.n	8001404 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fa:	f023 0206 	bic.w	r2, r3, #6
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	62da      	str	r2, [r3, #44]	; 0x2c
 8001402:	e002      	b.n	800140a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f06f 0202 	mvn.w	r2, #2
 800141a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f042 0220 	orr.w	r2, r2, #32
 800142a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001436:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800143a:	d113      	bne.n	8001464 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001440:	4a11      	ldr	r2, [pc, #68]	; (8001488 <HAL_ADC_Start_IT+0x164>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d105      	bne.n	8001452 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001446:	4b11      	ldr	r3, [pc, #68]	; (800148c <HAL_ADC_Start_IT+0x168>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800144e:	2b00      	cmp	r3, #0
 8001450:	d108      	bne.n	8001464 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	e00c      	b.n	800147e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	e003      	b.n	800147e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800147e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40012800 	.word	0x40012800
 800148c:	40012400 	.word	0x40012400

08001490 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800149c:	2300      	movs	r3, #0
 800149e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d040      	beq.n	8001530 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	689a      	ldr	r2, [r3, #8]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f042 0201 	orr.w	r2, r2, #1
 80014bc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014be:	4b1f      	ldr	r3, [pc, #124]	; (800153c <ADC_Enable+0xac>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a1f      	ldr	r2, [pc, #124]	; (8001540 <ADC_Enable+0xb0>)
 80014c4:	fba2 2303 	umull	r2, r3, r2, r3
 80014c8:	0c9b      	lsrs	r3, r3, #18
 80014ca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014cc:	e002      	b.n	80014d4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	3b01      	subs	r3, #1
 80014d2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f9      	bne.n	80014ce <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014da:	f7ff fd43 	bl	8000f64 <HAL_GetTick>
 80014de:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80014e0:	e01f      	b.n	8001522 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80014e2:	f7ff fd3f 	bl	8000f64 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d918      	bls.n	8001522 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d011      	beq.n	8001522 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001502:	f043 0210 	orr.w	r2, r3, #16
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150e:	f043 0201 	orr.w	r2, r3, #1
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e007      	b.n	8001532 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	2b01      	cmp	r3, #1
 800152e:	d1d8      	bne.n	80014e2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000010 	.word	0x20000010
 8001540:	431bde83 	.word	0x431bde83

08001544 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b01      	cmp	r3, #1
 800155c:	d12e      	bne.n	80015bc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 0201 	bic.w	r2, r2, #1
 800156c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800156e:	f7ff fcf9 	bl	8000f64 <HAL_GetTick>
 8001572:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001574:	e01b      	b.n	80015ae <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001576:	f7ff fcf5 	bl	8000f64 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d914      	bls.n	80015ae <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b01      	cmp	r3, #1
 8001590:	d10d      	bne.n	80015ae <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001596:	f043 0210 	orr.w	r2, r3, #16
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a2:	f043 0201 	orr.w	r2, r3, #1
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e007      	b.n	80015be <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d0dc      	beq.n	8001576 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80015c8:	b590      	push	{r4, r7, lr}
 80015ca:	b087      	sub	sp, #28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015d0:	2300      	movs	r3, #0
 80015d2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d101      	bne.n	80015e6 <HAL_ADCEx_Calibration_Start+0x1e>
 80015e2:	2302      	movs	r3, #2
 80015e4:	e097      	b.n	8001716 <HAL_ADCEx_Calibration_Start+0x14e>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2201      	movs	r2, #1
 80015ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff ffa8 	bl	8001544 <ADC_ConversionStop_Disable>
 80015f4:	4603      	mov	r3, r0
 80015f6:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff ff49 	bl	8001490 <ADC_Enable>
 80015fe:	4603      	mov	r3, r0
 8001600:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001602:	7dfb      	ldrb	r3, [r7, #23]
 8001604:	2b00      	cmp	r3, #0
 8001606:	f040 8081 	bne.w	800170c <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001612:	f023 0302 	bic.w	r3, r3, #2
 8001616:	f043 0202 	orr.w	r2, r3, #2
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800161e:	4b40      	ldr	r3, [pc, #256]	; (8001720 <HAL_ADCEx_Calibration_Start+0x158>)
 8001620:	681c      	ldr	r4, [r3, #0]
 8001622:	2002      	movs	r0, #2
 8001624:	f001 f980 	bl	8002928 <HAL_RCCEx_GetPeriphCLKFreq>
 8001628:	4603      	mov	r3, r0
 800162a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800162e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001630:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001632:	e002      	b.n	800163a <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	3b01      	subs	r3, #1
 8001638:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1f9      	bne.n	8001634 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f042 0208 	orr.w	r2, r2, #8
 800164e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001650:	f7ff fc88 	bl	8000f64 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001656:	e01b      	b.n	8001690 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001658:	f7ff fc84 	bl	8000f64 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b0a      	cmp	r3, #10
 8001664:	d914      	bls.n	8001690 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 0308 	and.w	r3, r3, #8
 8001670:	2b00      	cmp	r3, #0
 8001672:	d00d      	beq.n	8001690 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001678:	f023 0312 	bic.w	r3, r3, #18
 800167c:	f043 0210 	orr.w	r2, r3, #16
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e042      	b.n	8001716 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1dc      	bne.n	8001658 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f042 0204 	orr.w	r2, r2, #4
 80016ac:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80016ae:	f7ff fc59 	bl	8000f64 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80016b4:	e01b      	b.n	80016ee <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80016b6:	f7ff fc55 	bl	8000f64 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b0a      	cmp	r3, #10
 80016c2:	d914      	bls.n	80016ee <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 0304 	and.w	r3, r3, #4
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00d      	beq.n	80016ee <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d6:	f023 0312 	bic.w	r3, r3, #18
 80016da:	f043 0210 	orr.w	r2, r3, #16
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e013      	b.n	8001716 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1dc      	bne.n	80016b6 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001700:	f023 0303 	bic.w	r3, r3, #3
 8001704:	f043 0201 	orr.w	r2, r3, #1
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001714:	7dfb      	ldrb	r3, [r7, #23]
}
 8001716:	4618      	mov	r0, r3
 8001718:	371c      	adds	r7, #28
 800171a:	46bd      	mov	sp, r7
 800171c:	bd90      	pop	{r4, r7, pc}
 800171e:	bf00      	nop
 8001720:	20000010 	.word	0x20000010

08001724 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001724:	b490      	push	{r4, r7}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800173c:	2b01      	cmp	r3, #1
 800173e:	d101      	bne.n	8001744 <HAL_ADCEx_InjectedConfigChannel+0x20>
 8001740:	2302      	movs	r3, #2
 8001742:	e17d      	b.n	8001a40 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d119      	bne.n	8001788 <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d10c      	bne.n	8001776 <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001762:	0d9b      	lsrs	r3, r3, #22
 8001764:	059b      	lsls	r3, r3, #22
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	6812      	ldr	r2, [r2, #0]
 800176a:	03d1      	lsls	r1, r2, #15
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	6812      	ldr	r2, [r2, #0]
 8001770:	430b      	orrs	r3, r1
 8001772:	6393      	str	r3, [r2, #56]	; 0x38
 8001774:	e04f      	b.n	8001816 <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177a:	f043 0220 	orr.w	r2, r3, #32
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	73fb      	strb	r3, [r7, #15]
 8001786:	e046      	b.n	8001816 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	429a      	cmp	r2, r3
 8001792:	d82a      	bhi.n	80017ea <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	1ad2      	subs	r2, r2, r3
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	330f      	adds	r3, #15
 80017ac:	221f      	movs	r2, #31
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80017b6:	43db      	mvns	r3, r3
 80017b8:	4019      	ands	r1, r3
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	3b01      	subs	r3, #1
 80017c0:	0518      	lsls	r0, r3, #20
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681c      	ldr	r4, [r3, #0]
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	1ad2      	subs	r2, r2, r3
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	330f      	adds	r3, #15
 80017d8:	fa04 f303 	lsl.w	r3, r4, r3
 80017dc:	ea40 0203 	orr.w	r2, r0, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	639a      	str	r2, [r3, #56]	; 0x38
 80017e8:	e015      	b.n	8001816 <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	1ad2      	subs	r2, r2, r3
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	330f      	adds	r3, #15
 8001802:	221f      	movs	r2, #31
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800180c:	43da      	mvns	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	400a      	ands	r2, r1
 8001814:	639a      	str	r2, [r3, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	2b01      	cmp	r3, #1
 8001822:	d00c      	beq.n	800183e <HAL_ADCEx_InjectedConfigChannel+0x11a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800182e:	f023 0301 	bic.w	r3, r3, #1
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	6991      	ldr	r1, [r2, #24]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	6812      	ldr	r2, [r2, #0]
 800183a:	430b      	orrs	r3, r1
 800183c:	6093      	str	r3, [r2, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	7d5b      	ldrb	r3, [r3, #21]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d115      	bne.n	8001872 <HAL_ADCEx_InjectedConfigChannel+0x14e>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800184e:	d108      	bne.n	8001862 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	e007      	b.n	8001872 <HAL_ADCEx_InjectedConfigChannel+0x14e>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001866:	f043 0220 	orr.w	r2, r3, #32
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	7d1b      	ldrb	r3, [r3, #20]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d114      	bne.n	80018a4 <HAL_ADCEx_InjectedConfigChannel+0x180>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	7d5b      	ldrb	r3, [r3, #21]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d108      	bne.n	8001894 <HAL_ADCEx_InjectedConfigChannel+0x170>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	e007      	b.n	80018a4 <HAL_ADCEx_InjectedConfigChannel+0x180>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001898:	f043 0220 	orr.w	r2, r3, #32
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b09      	cmp	r3, #9
 80018aa:	d91c      	bls.n	80018e6 <HAL_ADCEx_InjectedConfigChannel+0x1c2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68d9      	ldr	r1, [r3, #12]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	4613      	mov	r3, r2
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	4413      	add	r3, r2
 80018bc:	3b1e      	subs	r3, #30
 80018be:	2207      	movs	r2, #7
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	4019      	ands	r1, r3
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	6898      	ldr	r0, [r3, #8]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4613      	mov	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4413      	add	r3, r2
 80018d6:	3b1e      	subs	r3, #30
 80018d8:	fa00 f203 	lsl.w	r2, r0, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	60da      	str	r2, [r3, #12]
 80018e4:	e019      	b.n	800191a <HAL_ADCEx_InjectedConfigChannel+0x1f6>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6919      	ldr	r1, [r3, #16]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4613      	mov	r3, r2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4413      	add	r3, r2
 80018f6:	2207      	movs	r2, #7
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	4019      	ands	r1, r3
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	6898      	ldr	r0, [r3, #8]
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4613      	mov	r3, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4413      	add	r3, r2
 800190e:	fa00 f203 	lsl.w	r2, r0, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	430a      	orrs	r2, r1
 8001918:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b10      	cmp	r3, #16
 8001920:	d003      	beq.n	800192a <HAL_ADCEx_InjectedConfigChannel+0x206>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8001926:	2b11      	cmp	r3, #17
 8001928:	d107      	bne.n	800193a <HAL_ADCEx_InjectedConfigChannel+0x216>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001938:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b03      	cmp	r3, #3
 8001940:	d022      	beq.n	8001988 <HAL_ADCEx_InjectedConfigChannel+0x264>
 8001942:	2b03      	cmp	r3, #3
 8001944:	d82e      	bhi.n	80019a4 <HAL_ADCEx_InjectedConfigChannel+0x280>
 8001946:	2b01      	cmp	r3, #1
 8001948:	d002      	beq.n	8001950 <HAL_ADCEx_InjectedConfigChannel+0x22c>
 800194a:	2b02      	cmp	r3, #2
 800194c:	d00e      	beq.n	800196c <HAL_ADCEx_InjectedConfigChannel+0x248>
 800194e:	e029      	b.n	80019a4 <HAL_ADCEx_InjectedConfigChannel+0x280>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800195a:	f023 030f 	bic.w	r3, r3, #15
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	68d1      	ldr	r1, [r2, #12]
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6812      	ldr	r2, [r2, #0]
 8001966:	430b      	orrs	r3, r1
 8001968:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 800196a:	e029      	b.n	80019c0 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001976:	f023 030f 	bic.w	r3, r3, #15
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	68d1      	ldr	r1, [r2, #12]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6812      	ldr	r2, [r2, #0]
 8001982:	430b      	orrs	r3, r1
 8001984:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 8001986:	e01b      	b.n	80019c0 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001992:	f023 030f 	bic.w	r3, r3, #15
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	68d1      	ldr	r1, [r2, #12]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6812      	ldr	r2, [r2, #0]
 800199e:	430b      	orrs	r3, r1
 80019a0:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 80019a2:	e00d      	b.n	80019c0 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80019ae:	f023 030f 	bic.w	r3, r3, #15
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	68d1      	ldr	r1, [r2, #12]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6812      	ldr	r2, [r2, #0]
 80019ba:	430b      	orrs	r3, r1
 80019bc:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 80019be:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b10      	cmp	r3, #16
 80019c6:	d003      	beq.n	80019d0 <HAL_ADCEx_InjectedConfigChannel+0x2ac>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80019cc:	2b11      	cmp	r3, #17
 80019ce:	d132      	bne.n	8001a36 <HAL_ADCEx_InjectedConfigChannel+0x312>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a1d      	ldr	r2, [pc, #116]	; (8001a4c <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d125      	bne.n	8001a26 <HAL_ADCEx_InjectedConfigChannel+0x302>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d126      	bne.n	8001a36 <HAL_ADCEx_InjectedConfigChannel+0x312>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80019f6:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b10      	cmp	r3, #16
 80019fe:	d11a      	bne.n	8001a36 <HAL_ADCEx_InjectedConfigChannel+0x312>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a00:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a13      	ldr	r2, [pc, #76]	; (8001a54 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8001a06:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0a:	0c9a      	lsrs	r2, r3, #18
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a16:	e002      	b.n	8001a1e <HAL_ADCEx_InjectedConfigChannel+0x2fa>
          {
            wait_loop_index--;
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1f9      	bne.n	8001a18 <HAL_ADCEx_InjectedConfigChannel+0x2f4>
 8001a24:	e007      	b.n	8001a36 <HAL_ADCEx_InjectedConfigChannel+0x312>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2a:	f043 0220 	orr.w	r2, r3, #32
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc90      	pop	{r4, r7}
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40012400 	.word	0x40012400
 8001a50:	20000010 	.word	0x20000010
 8001a54:	431bde83 	.word	0x431bde83

08001a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <__NVIC_SetPriorityGrouping+0x44>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a74:	4013      	ands	r3, r2
 8001a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a8a:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <__NVIC_SetPriorityGrouping+0x44>)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	60d3      	str	r3, [r2, #12]
}
 8001a90:	bf00      	nop
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa4:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	0a1b      	lsrs	r3, r3, #8
 8001aaa:	f003 0307 	and.w	r3, r3, #7
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	db0b      	blt.n	8001ae6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	f003 021f 	and.w	r2, r3, #31
 8001ad4:	4906      	ldr	r1, [pc, #24]	; (8001af0 <__NVIC_EnableIRQ+0x34>)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	095b      	lsrs	r3, r3, #5
 8001adc:	2001      	movs	r0, #1
 8001ade:	fa00 f202 	lsl.w	r2, r0, r2
 8001ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr
 8001af0:	e000e100 	.word	0xe000e100

08001af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	6039      	str	r1, [r7, #0]
 8001afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	db0a      	blt.n	8001b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	490c      	ldr	r1, [pc, #48]	; (8001b40 <__NVIC_SetPriority+0x4c>)
 8001b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b12:	0112      	lsls	r2, r2, #4
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	440b      	add	r3, r1
 8001b18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b1c:	e00a      	b.n	8001b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	4908      	ldr	r1, [pc, #32]	; (8001b44 <__NVIC_SetPriority+0x50>)
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	3b04      	subs	r3, #4
 8001b2c:	0112      	lsls	r2, r2, #4
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	440b      	add	r3, r1
 8001b32:	761a      	strb	r2, [r3, #24]
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e000e100 	.word	0xe000e100
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b089      	sub	sp, #36	; 0x24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f1c3 0307 	rsb	r3, r3, #7
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	bf28      	it	cs
 8001b66:	2304      	movcs	r3, #4
 8001b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	2b06      	cmp	r3, #6
 8001b70:	d902      	bls.n	8001b78 <NVIC_EncodePriority+0x30>
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3b03      	subs	r3, #3
 8001b76:	e000      	b.n	8001b7a <NVIC_EncodePriority+0x32>
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43da      	mvns	r2, r3
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	401a      	ands	r2, r3
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b90:	f04f 31ff 	mov.w	r1, #4294967295
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9a:	43d9      	mvns	r1, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba0:	4313      	orrs	r3, r2
         );
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3724      	adds	r7, #36	; 0x24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bbc:	d301      	bcc.n	8001bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e00f      	b.n	8001be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bc2:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <SysTick_Config+0x40>)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bca:	210f      	movs	r1, #15
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd0:	f7ff ff90 	bl	8001af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <SysTick_Config+0x40>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bda:	4b04      	ldr	r3, [pc, #16]	; (8001bec <SysTick_Config+0x40>)
 8001bdc:	2207      	movs	r2, #7
 8001bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	e000e010 	.word	0xe000e010

08001bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff ff2d 	bl	8001a58 <__NVIC_SetPriorityGrouping>
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c18:	f7ff ff42 	bl	8001aa0 <__NVIC_GetPriorityGrouping>
 8001c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	68b9      	ldr	r1, [r7, #8]
 8001c22:	6978      	ldr	r0, [r7, #20]
 8001c24:	f7ff ff90 	bl	8001b48 <NVIC_EncodePriority>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c2e:	4611      	mov	r1, r2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff5f 	bl	8001af4 <__NVIC_SetPriority>
}
 8001c36:	bf00      	nop
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff35 	bl	8001abc <__NVIC_EnableIRQ>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff ffa2 	bl	8001bac <SysTick_Config>
 8001c68:	4603      	mov	r3, r0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b08b      	sub	sp, #44	; 0x2c
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c82:	2300      	movs	r3, #0
 8001c84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c86:	e169      	b.n	8001f5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c88:	2201      	movs	r2, #1
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	69fa      	ldr	r2, [r7, #28]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	f040 8158 	bne.w	8001f56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	4a9a      	ldr	r2, [pc, #616]	; (8001f14 <HAL_GPIO_Init+0x2a0>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d05e      	beq.n	8001d6e <HAL_GPIO_Init+0xfa>
 8001cb0:	4a98      	ldr	r2, [pc, #608]	; (8001f14 <HAL_GPIO_Init+0x2a0>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d875      	bhi.n	8001da2 <HAL_GPIO_Init+0x12e>
 8001cb6:	4a98      	ldr	r2, [pc, #608]	; (8001f18 <HAL_GPIO_Init+0x2a4>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d058      	beq.n	8001d6e <HAL_GPIO_Init+0xfa>
 8001cbc:	4a96      	ldr	r2, [pc, #600]	; (8001f18 <HAL_GPIO_Init+0x2a4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d86f      	bhi.n	8001da2 <HAL_GPIO_Init+0x12e>
 8001cc2:	4a96      	ldr	r2, [pc, #600]	; (8001f1c <HAL_GPIO_Init+0x2a8>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d052      	beq.n	8001d6e <HAL_GPIO_Init+0xfa>
 8001cc8:	4a94      	ldr	r2, [pc, #592]	; (8001f1c <HAL_GPIO_Init+0x2a8>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d869      	bhi.n	8001da2 <HAL_GPIO_Init+0x12e>
 8001cce:	4a94      	ldr	r2, [pc, #592]	; (8001f20 <HAL_GPIO_Init+0x2ac>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d04c      	beq.n	8001d6e <HAL_GPIO_Init+0xfa>
 8001cd4:	4a92      	ldr	r2, [pc, #584]	; (8001f20 <HAL_GPIO_Init+0x2ac>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d863      	bhi.n	8001da2 <HAL_GPIO_Init+0x12e>
 8001cda:	4a92      	ldr	r2, [pc, #584]	; (8001f24 <HAL_GPIO_Init+0x2b0>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d046      	beq.n	8001d6e <HAL_GPIO_Init+0xfa>
 8001ce0:	4a90      	ldr	r2, [pc, #576]	; (8001f24 <HAL_GPIO_Init+0x2b0>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d85d      	bhi.n	8001da2 <HAL_GPIO_Init+0x12e>
 8001ce6:	2b12      	cmp	r3, #18
 8001ce8:	d82a      	bhi.n	8001d40 <HAL_GPIO_Init+0xcc>
 8001cea:	2b12      	cmp	r3, #18
 8001cec:	d859      	bhi.n	8001da2 <HAL_GPIO_Init+0x12e>
 8001cee:	a201      	add	r2, pc, #4	; (adr r2, 8001cf4 <HAL_GPIO_Init+0x80>)
 8001cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf4:	08001d6f 	.word	0x08001d6f
 8001cf8:	08001d49 	.word	0x08001d49
 8001cfc:	08001d5b 	.word	0x08001d5b
 8001d00:	08001d9d 	.word	0x08001d9d
 8001d04:	08001da3 	.word	0x08001da3
 8001d08:	08001da3 	.word	0x08001da3
 8001d0c:	08001da3 	.word	0x08001da3
 8001d10:	08001da3 	.word	0x08001da3
 8001d14:	08001da3 	.word	0x08001da3
 8001d18:	08001da3 	.word	0x08001da3
 8001d1c:	08001da3 	.word	0x08001da3
 8001d20:	08001da3 	.word	0x08001da3
 8001d24:	08001da3 	.word	0x08001da3
 8001d28:	08001da3 	.word	0x08001da3
 8001d2c:	08001da3 	.word	0x08001da3
 8001d30:	08001da3 	.word	0x08001da3
 8001d34:	08001da3 	.word	0x08001da3
 8001d38:	08001d51 	.word	0x08001d51
 8001d3c:	08001d65 	.word	0x08001d65
 8001d40:	4a79      	ldr	r2, [pc, #484]	; (8001f28 <HAL_GPIO_Init+0x2b4>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d013      	beq.n	8001d6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d46:	e02c      	b.n	8001da2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	623b      	str	r3, [r7, #32]
          break;
 8001d4e:	e029      	b.n	8001da4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	3304      	adds	r3, #4
 8001d56:	623b      	str	r3, [r7, #32]
          break;
 8001d58:	e024      	b.n	8001da4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	3308      	adds	r3, #8
 8001d60:	623b      	str	r3, [r7, #32]
          break;
 8001d62:	e01f      	b.n	8001da4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	330c      	adds	r3, #12
 8001d6a:	623b      	str	r3, [r7, #32]
          break;
 8001d6c:	e01a      	b.n	8001da4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d102      	bne.n	8001d7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d76:	2304      	movs	r3, #4
 8001d78:	623b      	str	r3, [r7, #32]
          break;
 8001d7a:	e013      	b.n	8001da4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d105      	bne.n	8001d90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d84:	2308      	movs	r3, #8
 8001d86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69fa      	ldr	r2, [r7, #28]
 8001d8c:	611a      	str	r2, [r3, #16]
          break;
 8001d8e:	e009      	b.n	8001da4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d90:	2308      	movs	r3, #8
 8001d92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69fa      	ldr	r2, [r7, #28]
 8001d98:	615a      	str	r2, [r3, #20]
          break;
 8001d9a:	e003      	b.n	8001da4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	623b      	str	r3, [r7, #32]
          break;
 8001da0:	e000      	b.n	8001da4 <HAL_GPIO_Init+0x130>
          break;
 8001da2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	2bff      	cmp	r3, #255	; 0xff
 8001da8:	d801      	bhi.n	8001dae <HAL_GPIO_Init+0x13a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	e001      	b.n	8001db2 <HAL_GPIO_Init+0x13e>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	3304      	adds	r3, #4
 8001db2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	2bff      	cmp	r3, #255	; 0xff
 8001db8:	d802      	bhi.n	8001dc0 <HAL_GPIO_Init+0x14c>
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	e002      	b.n	8001dc6 <HAL_GPIO_Init+0x152>
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	3b08      	subs	r3, #8
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	210f      	movs	r1, #15
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	401a      	ands	r2, r3
 8001dd8:	6a39      	ldr	r1, [r7, #32]
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8001de0:	431a      	orrs	r2, r3
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 80b1 	beq.w	8001f56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001df4:	4b4d      	ldr	r3, [pc, #308]	; (8001f2c <HAL_GPIO_Init+0x2b8>)
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	4a4c      	ldr	r2, [pc, #304]	; (8001f2c <HAL_GPIO_Init+0x2b8>)
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	6193      	str	r3, [r2, #24]
 8001e00:	4b4a      	ldr	r3, [pc, #296]	; (8001f2c <HAL_GPIO_Init+0x2b8>)
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e0c:	4a48      	ldr	r2, [pc, #288]	; (8001f30 <HAL_GPIO_Init+0x2bc>)
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	089b      	lsrs	r3, r3, #2
 8001e12:	3302      	adds	r3, #2
 8001e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	f003 0303 	and.w	r3, r3, #3
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	220f      	movs	r2, #15
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a40      	ldr	r2, [pc, #256]	; (8001f34 <HAL_GPIO_Init+0x2c0>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d013      	beq.n	8001e60 <HAL_GPIO_Init+0x1ec>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a3f      	ldr	r2, [pc, #252]	; (8001f38 <HAL_GPIO_Init+0x2c4>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d00d      	beq.n	8001e5c <HAL_GPIO_Init+0x1e8>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a3e      	ldr	r2, [pc, #248]	; (8001f3c <HAL_GPIO_Init+0x2c8>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d007      	beq.n	8001e58 <HAL_GPIO_Init+0x1e4>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a3d      	ldr	r2, [pc, #244]	; (8001f40 <HAL_GPIO_Init+0x2cc>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d101      	bne.n	8001e54 <HAL_GPIO_Init+0x1e0>
 8001e50:	2303      	movs	r3, #3
 8001e52:	e006      	b.n	8001e62 <HAL_GPIO_Init+0x1ee>
 8001e54:	2304      	movs	r3, #4
 8001e56:	e004      	b.n	8001e62 <HAL_GPIO_Init+0x1ee>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e002      	b.n	8001e62 <HAL_GPIO_Init+0x1ee>
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e000      	b.n	8001e62 <HAL_GPIO_Init+0x1ee>
 8001e60:	2300      	movs	r3, #0
 8001e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e64:	f002 0203 	and.w	r2, r2, #3
 8001e68:	0092      	lsls	r2, r2, #2
 8001e6a:	4093      	lsls	r3, r2
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e72:	492f      	ldr	r1, [pc, #188]	; (8001f30 <HAL_GPIO_Init+0x2bc>)
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	089b      	lsrs	r3, r3, #2
 8001e78:	3302      	adds	r3, #2
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d006      	beq.n	8001e9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e8c:	4b2d      	ldr	r3, [pc, #180]	; (8001f44 <HAL_GPIO_Init+0x2d0>)
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	492c      	ldr	r1, [pc, #176]	; (8001f44 <HAL_GPIO_Init+0x2d0>)
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	608b      	str	r3, [r1, #8]
 8001e98:	e006      	b.n	8001ea8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e9a:	4b2a      	ldr	r3, [pc, #168]	; (8001f44 <HAL_GPIO_Init+0x2d0>)
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	4928      	ldr	r1, [pc, #160]	; (8001f44 <HAL_GPIO_Init+0x2d0>)
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d006      	beq.n	8001ec2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001eb4:	4b23      	ldr	r3, [pc, #140]	; (8001f44 <HAL_GPIO_Init+0x2d0>)
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	4922      	ldr	r1, [pc, #136]	; (8001f44 <HAL_GPIO_Init+0x2d0>)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	60cb      	str	r3, [r1, #12]
 8001ec0:	e006      	b.n	8001ed0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ec2:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <HAL_GPIO_Init+0x2d0>)
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	491e      	ldr	r1, [pc, #120]	; (8001f44 <HAL_GPIO_Init+0x2d0>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d006      	beq.n	8001eea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001edc:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <HAL_GPIO_Init+0x2d0>)
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	4918      	ldr	r1, [pc, #96]	; (8001f44 <HAL_GPIO_Init+0x2d0>)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]
 8001ee8:	e006      	b.n	8001ef8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001eea:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <HAL_GPIO_Init+0x2d0>)
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	4914      	ldr	r1, [pc, #80]	; (8001f44 <HAL_GPIO_Init+0x2d0>)
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d021      	beq.n	8001f48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f04:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <HAL_GPIO_Init+0x2d0>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	490e      	ldr	r1, [pc, #56]	; (8001f44 <HAL_GPIO_Init+0x2d0>)
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	600b      	str	r3, [r1, #0]
 8001f10:	e021      	b.n	8001f56 <HAL_GPIO_Init+0x2e2>
 8001f12:	bf00      	nop
 8001f14:	10320000 	.word	0x10320000
 8001f18:	10310000 	.word	0x10310000
 8001f1c:	10220000 	.word	0x10220000
 8001f20:	10210000 	.word	0x10210000
 8001f24:	10120000 	.word	0x10120000
 8001f28:	10110000 	.word	0x10110000
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40010000 	.word	0x40010000
 8001f34:	40010800 	.word	0x40010800
 8001f38:	40010c00 	.word	0x40010c00
 8001f3c:	40011000 	.word	0x40011000
 8001f40:	40011400 	.word	0x40011400
 8001f44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <HAL_GPIO_Init+0x304>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	4909      	ldr	r1, [pc, #36]	; (8001f78 <HAL_GPIO_Init+0x304>)
 8001f52:	4013      	ands	r3, r2
 8001f54:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	3301      	adds	r3, #1
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	fa22 f303 	lsr.w	r3, r2, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f47f ae8e 	bne.w	8001c88 <HAL_GPIO_Init+0x14>
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	bf00      	nop
 8001f70:	372c      	adds	r7, #44	; 0x2c
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr
 8001f78:	40010400 	.word	0x40010400

08001f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	807b      	strh	r3, [r7, #2]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f8c:	787b      	ldrb	r3, [r7, #1]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f92:	887a      	ldrh	r2, [r7, #2]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f98:	e003      	b.n	8001fa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f9a:	887b      	ldrh	r3, [r7, #2]
 8001f9c:	041a      	lsls	r2, r3, #16
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	611a      	str	r2, [r3, #16]
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr

08001fac <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001fb0:	4b03      	ldr	r3, [pc, #12]	; (8001fc0 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	601a      	str	r2, [r3, #0]
}
 8001fb6:	bf00      	nop
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	420e0020 	.word	0x420e0020

08001fc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e272      	b.n	80024bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 8087 	beq.w	80020f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fe4:	4b92      	ldr	r3, [pc, #584]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 030c 	and.w	r3, r3, #12
 8001fec:	2b04      	cmp	r3, #4
 8001fee:	d00c      	beq.n	800200a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ff0:	4b8f      	ldr	r3, [pc, #572]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 030c 	and.w	r3, r3, #12
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d112      	bne.n	8002022 <HAL_RCC_OscConfig+0x5e>
 8001ffc:	4b8c      	ldr	r3, [pc, #560]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002008:	d10b      	bne.n	8002022 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800200a:	4b89      	ldr	r3, [pc, #548]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d06c      	beq.n	80020f0 <HAL_RCC_OscConfig+0x12c>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d168      	bne.n	80020f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e24c      	b.n	80024bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800202a:	d106      	bne.n	800203a <HAL_RCC_OscConfig+0x76>
 800202c:	4b80      	ldr	r3, [pc, #512]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a7f      	ldr	r2, [pc, #508]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	e02e      	b.n	8002098 <HAL_RCC_OscConfig+0xd4>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10c      	bne.n	800205c <HAL_RCC_OscConfig+0x98>
 8002042:	4b7b      	ldr	r3, [pc, #492]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a7a      	ldr	r2, [pc, #488]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	4b78      	ldr	r3, [pc, #480]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a77      	ldr	r2, [pc, #476]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002054:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	e01d      	b.n	8002098 <HAL_RCC_OscConfig+0xd4>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002064:	d10c      	bne.n	8002080 <HAL_RCC_OscConfig+0xbc>
 8002066:	4b72      	ldr	r3, [pc, #456]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a71      	ldr	r2, [pc, #452]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 800206c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	4b6f      	ldr	r3, [pc, #444]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a6e      	ldr	r2, [pc, #440]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	e00b      	b.n	8002098 <HAL_RCC_OscConfig+0xd4>
 8002080:	4b6b      	ldr	r3, [pc, #428]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a6a      	ldr	r2, [pc, #424]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800208a:	6013      	str	r3, [r2, #0]
 800208c:	4b68      	ldr	r3, [pc, #416]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a67      	ldr	r2, [pc, #412]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002096:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d013      	beq.n	80020c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a0:	f7fe ff60 	bl	8000f64 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a8:	f7fe ff5c 	bl	8000f64 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b64      	cmp	r3, #100	; 0x64
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e200      	b.n	80024bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ba:	4b5d      	ldr	r3, [pc, #372]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0xe4>
 80020c6:	e014      	b.n	80020f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c8:	f7fe ff4c 	bl	8000f64 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d0:	f7fe ff48 	bl	8000f64 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b64      	cmp	r3, #100	; 0x64
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e1ec      	b.n	80024bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e2:	4b53      	ldr	r3, [pc, #332]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x10c>
 80020ee:	e000      	b.n	80020f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d063      	beq.n	80021c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020fe:	4b4c      	ldr	r3, [pc, #304]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00b      	beq.n	8002122 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800210a:	4b49      	ldr	r3, [pc, #292]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 030c 	and.w	r3, r3, #12
 8002112:	2b08      	cmp	r3, #8
 8002114:	d11c      	bne.n	8002150 <HAL_RCC_OscConfig+0x18c>
 8002116:	4b46      	ldr	r3, [pc, #280]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d116      	bne.n	8002150 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002122:	4b43      	ldr	r3, [pc, #268]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d005      	beq.n	800213a <HAL_RCC_OscConfig+0x176>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d001      	beq.n	800213a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e1c0      	b.n	80024bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213a:	4b3d      	ldr	r3, [pc, #244]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4939      	ldr	r1, [pc, #228]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 800214a:	4313      	orrs	r3, r2
 800214c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214e:	e03a      	b.n	80021c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d020      	beq.n	800219a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002158:	4b36      	ldr	r3, [pc, #216]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 800215a:	2201      	movs	r2, #1
 800215c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215e:	f7fe ff01 	bl	8000f64 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002166:	f7fe fefd 	bl	8000f64 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e1a1      	b.n	80024bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002178:	4b2d      	ldr	r3, [pc, #180]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0f0      	beq.n	8002166 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002184:	4b2a      	ldr	r3, [pc, #168]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	4927      	ldr	r1, [pc, #156]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002194:	4313      	orrs	r3, r2
 8002196:	600b      	str	r3, [r1, #0]
 8002198:	e015      	b.n	80021c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800219a:	4b26      	ldr	r3, [pc, #152]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a0:	f7fe fee0 	bl	8000f64 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021a8:	f7fe fedc 	bl	8000f64 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e180      	b.n	80024bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ba:	4b1d      	ldr	r3, [pc, #116]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f0      	bne.n	80021a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d03a      	beq.n	8002248 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d019      	beq.n	800220e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021da:	4b17      	ldr	r3, [pc, #92]	; (8002238 <HAL_RCC_OscConfig+0x274>)
 80021dc:	2201      	movs	r2, #1
 80021de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e0:	f7fe fec0 	bl	8000f64 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e8:	f7fe febc 	bl	8000f64 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e160      	b.n	80024bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fa:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002206:	2001      	movs	r0, #1
 8002208:	f000 faba 	bl	8002780 <RCC_Delay>
 800220c:	e01c      	b.n	8002248 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800220e:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <HAL_RCC_OscConfig+0x274>)
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002214:	f7fe fea6 	bl	8000f64 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800221a:	e00f      	b.n	800223c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800221c:	f7fe fea2 	bl	8000f64 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d908      	bls.n	800223c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e146      	b.n	80024bc <HAL_RCC_OscConfig+0x4f8>
 800222e:	bf00      	nop
 8002230:	40021000 	.word	0x40021000
 8002234:	42420000 	.word	0x42420000
 8002238:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800223c:	4b92      	ldr	r3, [pc, #584]	; (8002488 <HAL_RCC_OscConfig+0x4c4>)
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1e9      	bne.n	800221c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 80a6 	beq.w	80023a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002256:	2300      	movs	r3, #0
 8002258:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800225a:	4b8b      	ldr	r3, [pc, #556]	; (8002488 <HAL_RCC_OscConfig+0x4c4>)
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10d      	bne.n	8002282 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002266:	4b88      	ldr	r3, [pc, #544]	; (8002488 <HAL_RCC_OscConfig+0x4c4>)
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	4a87      	ldr	r2, [pc, #540]	; (8002488 <HAL_RCC_OscConfig+0x4c4>)
 800226c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002270:	61d3      	str	r3, [r2, #28]
 8002272:	4b85      	ldr	r3, [pc, #532]	; (8002488 <HAL_RCC_OscConfig+0x4c4>)
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800227e:	2301      	movs	r3, #1
 8002280:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002282:	4b82      	ldr	r3, [pc, #520]	; (800248c <HAL_RCC_OscConfig+0x4c8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228a:	2b00      	cmp	r3, #0
 800228c:	d118      	bne.n	80022c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800228e:	4b7f      	ldr	r3, [pc, #508]	; (800248c <HAL_RCC_OscConfig+0x4c8>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a7e      	ldr	r2, [pc, #504]	; (800248c <HAL_RCC_OscConfig+0x4c8>)
 8002294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800229a:	f7fe fe63 	bl	8000f64 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a2:	f7fe fe5f 	bl	8000f64 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b64      	cmp	r3, #100	; 0x64
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e103      	b.n	80024bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b4:	4b75      	ldr	r3, [pc, #468]	; (800248c <HAL_RCC_OscConfig+0x4c8>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0f0      	beq.n	80022a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d106      	bne.n	80022d6 <HAL_RCC_OscConfig+0x312>
 80022c8:	4b6f      	ldr	r3, [pc, #444]	; (8002488 <HAL_RCC_OscConfig+0x4c4>)
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	4a6e      	ldr	r2, [pc, #440]	; (8002488 <HAL_RCC_OscConfig+0x4c4>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	6213      	str	r3, [r2, #32]
 80022d4:	e02d      	b.n	8002332 <HAL_RCC_OscConfig+0x36e>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10c      	bne.n	80022f8 <HAL_RCC_OscConfig+0x334>
 80022de:	4b6a      	ldr	r3, [pc, #424]	; (8002488 <HAL_RCC_OscConfig+0x4c4>)
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	4a69      	ldr	r2, [pc, #420]	; (8002488 <HAL_RCC_OscConfig+0x4c4>)
 80022e4:	f023 0301 	bic.w	r3, r3, #1
 80022e8:	6213      	str	r3, [r2, #32]
 80022ea:	4b67      	ldr	r3, [pc, #412]	; (8002488 <HAL_RCC_OscConfig+0x4c4>)
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	4a66      	ldr	r2, [pc, #408]	; (8002488 <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	f023 0304 	bic.w	r3, r3, #4
 80022f4:	6213      	str	r3, [r2, #32]
 80022f6:	e01c      	b.n	8002332 <HAL_RCC_OscConfig+0x36e>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	2b05      	cmp	r3, #5
 80022fe:	d10c      	bne.n	800231a <HAL_RCC_OscConfig+0x356>
 8002300:	4b61      	ldr	r3, [pc, #388]	; (8002488 <HAL_RCC_OscConfig+0x4c4>)
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	4a60      	ldr	r2, [pc, #384]	; (8002488 <HAL_RCC_OscConfig+0x4c4>)
 8002306:	f043 0304 	orr.w	r3, r3, #4
 800230a:	6213      	str	r3, [r2, #32]
 800230c:	4b5e      	ldr	r3, [pc, #376]	; (8002488 <HAL_RCC_OscConfig+0x4c4>)
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	4a5d      	ldr	r2, [pc, #372]	; (8002488 <HAL_RCC_OscConfig+0x4c4>)
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	6213      	str	r3, [r2, #32]
 8002318:	e00b      	b.n	8002332 <HAL_RCC_OscConfig+0x36e>
 800231a:	4b5b      	ldr	r3, [pc, #364]	; (8002488 <HAL_RCC_OscConfig+0x4c4>)
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	4a5a      	ldr	r2, [pc, #360]	; (8002488 <HAL_RCC_OscConfig+0x4c4>)
 8002320:	f023 0301 	bic.w	r3, r3, #1
 8002324:	6213      	str	r3, [r2, #32]
 8002326:	4b58      	ldr	r3, [pc, #352]	; (8002488 <HAL_RCC_OscConfig+0x4c4>)
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	4a57      	ldr	r2, [pc, #348]	; (8002488 <HAL_RCC_OscConfig+0x4c4>)
 800232c:	f023 0304 	bic.w	r3, r3, #4
 8002330:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d015      	beq.n	8002366 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233a:	f7fe fe13 	bl	8000f64 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002340:	e00a      	b.n	8002358 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002342:	f7fe fe0f 	bl	8000f64 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002350:	4293      	cmp	r3, r2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e0b1      	b.n	80024bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002358:	4b4b      	ldr	r3, [pc, #300]	; (8002488 <HAL_RCC_OscConfig+0x4c4>)
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0ee      	beq.n	8002342 <HAL_RCC_OscConfig+0x37e>
 8002364:	e014      	b.n	8002390 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002366:	f7fe fdfd 	bl	8000f64 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800236c:	e00a      	b.n	8002384 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236e:	f7fe fdf9 	bl	8000f64 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	f241 3288 	movw	r2, #5000	; 0x1388
 800237c:	4293      	cmp	r3, r2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e09b      	b.n	80024bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002384:	4b40      	ldr	r3, [pc, #256]	; (8002488 <HAL_RCC_OscConfig+0x4c4>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1ee      	bne.n	800236e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002390:	7dfb      	ldrb	r3, [r7, #23]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d105      	bne.n	80023a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002396:	4b3c      	ldr	r3, [pc, #240]	; (8002488 <HAL_RCC_OscConfig+0x4c4>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	4a3b      	ldr	r2, [pc, #236]	; (8002488 <HAL_RCC_OscConfig+0x4c4>)
 800239c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 8087 	beq.w	80024ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023ac:	4b36      	ldr	r3, [pc, #216]	; (8002488 <HAL_RCC_OscConfig+0x4c4>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 030c 	and.w	r3, r3, #12
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d061      	beq.n	800247c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d146      	bne.n	800244e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c0:	4b33      	ldr	r3, [pc, #204]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c6:	f7fe fdcd 	bl	8000f64 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ce:	f7fe fdc9 	bl	8000f64 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e06d      	b.n	80024bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e0:	4b29      	ldr	r3, [pc, #164]	; (8002488 <HAL_RCC_OscConfig+0x4c4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1f0      	bne.n	80023ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f4:	d108      	bne.n	8002408 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023f6:	4b24      	ldr	r3, [pc, #144]	; (8002488 <HAL_RCC_OscConfig+0x4c4>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	4921      	ldr	r1, [pc, #132]	; (8002488 <HAL_RCC_OscConfig+0x4c4>)
 8002404:	4313      	orrs	r3, r2
 8002406:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002408:	4b1f      	ldr	r3, [pc, #124]	; (8002488 <HAL_RCC_OscConfig+0x4c4>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a19      	ldr	r1, [r3, #32]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	430b      	orrs	r3, r1
 800241a:	491b      	ldr	r1, [pc, #108]	; (8002488 <HAL_RCC_OscConfig+0x4c4>)
 800241c:	4313      	orrs	r3, r2
 800241e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002420:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 8002422:	2201      	movs	r2, #1
 8002424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002426:	f7fe fd9d 	bl	8000f64 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242e:	f7fe fd99 	bl	8000f64 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e03d      	b.n	80024bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002440:	4b11      	ldr	r3, [pc, #68]	; (8002488 <HAL_RCC_OscConfig+0x4c4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0f0      	beq.n	800242e <HAL_RCC_OscConfig+0x46a>
 800244c:	e035      	b.n	80024ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244e:	4b10      	ldr	r3, [pc, #64]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002454:	f7fe fd86 	bl	8000f64 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800245c:	f7fe fd82 	bl	8000f64 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e026      	b.n	80024bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <HAL_RCC_OscConfig+0x4c4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f0      	bne.n	800245c <HAL_RCC_OscConfig+0x498>
 800247a:	e01e      	b.n	80024ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	69db      	ldr	r3, [r3, #28]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d107      	bne.n	8002494 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e019      	b.n	80024bc <HAL_RCC_OscConfig+0x4f8>
 8002488:	40021000 	.word	0x40021000
 800248c:	40007000 	.word	0x40007000
 8002490:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002494:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <HAL_RCC_OscConfig+0x500>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d106      	bne.n	80024b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d001      	beq.n	80024ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40021000 	.word	0x40021000

080024c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0d0      	b.n	800267e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024dc:	4b6a      	ldr	r3, [pc, #424]	; (8002688 <HAL_RCC_ClockConfig+0x1c0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d910      	bls.n	800250c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ea:	4b67      	ldr	r3, [pc, #412]	; (8002688 <HAL_RCC_ClockConfig+0x1c0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f023 0207 	bic.w	r2, r3, #7
 80024f2:	4965      	ldr	r1, [pc, #404]	; (8002688 <HAL_RCC_ClockConfig+0x1c0>)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fa:	4b63      	ldr	r3, [pc, #396]	; (8002688 <HAL_RCC_ClockConfig+0x1c0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d001      	beq.n	800250c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e0b8      	b.n	800267e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d020      	beq.n	800255a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002524:	4b59      	ldr	r3, [pc, #356]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	4a58      	ldr	r2, [pc, #352]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 800252a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800252e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d005      	beq.n	8002548 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800253c:	4b53      	ldr	r3, [pc, #332]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	4a52      	ldr	r2, [pc, #328]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002542:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002546:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002548:	4b50      	ldr	r3, [pc, #320]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	494d      	ldr	r1, [pc, #308]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002556:	4313      	orrs	r3, r2
 8002558:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d040      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d107      	bne.n	800257e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256e:	4b47      	ldr	r3, [pc, #284]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d115      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e07f      	b.n	800267e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d107      	bne.n	8002596 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002586:	4b41      	ldr	r3, [pc, #260]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d109      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e073      	b.n	800267e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002596:	4b3d      	ldr	r3, [pc, #244]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e06b      	b.n	800267e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025a6:	4b39      	ldr	r3, [pc, #228]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f023 0203 	bic.w	r2, r3, #3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	4936      	ldr	r1, [pc, #216]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025b8:	f7fe fcd4 	bl	8000f64 <HAL_GetTick>
 80025bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025be:	e00a      	b.n	80025d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c0:	f7fe fcd0 	bl	8000f64 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e053      	b.n	800267e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d6:	4b2d      	ldr	r3, [pc, #180]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 020c 	and.w	r2, r3, #12
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d1eb      	bne.n	80025c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025e8:	4b27      	ldr	r3, [pc, #156]	; (8002688 <HAL_RCC_ClockConfig+0x1c0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d210      	bcs.n	8002618 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f6:	4b24      	ldr	r3, [pc, #144]	; (8002688 <HAL_RCC_ClockConfig+0x1c0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 0207 	bic.w	r2, r3, #7
 80025fe:	4922      	ldr	r1, [pc, #136]	; (8002688 <HAL_RCC_ClockConfig+0x1c0>)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	4313      	orrs	r3, r2
 8002604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002606:	4b20      	ldr	r3, [pc, #128]	; (8002688 <HAL_RCC_ClockConfig+0x1c0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d001      	beq.n	8002618 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e032      	b.n	800267e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b00      	cmp	r3, #0
 8002622:	d008      	beq.n	8002636 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002624:	4b19      	ldr	r3, [pc, #100]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4916      	ldr	r1, [pc, #88]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	4313      	orrs	r3, r2
 8002634:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b00      	cmp	r3, #0
 8002640:	d009      	beq.n	8002656 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002642:	4b12      	ldr	r3, [pc, #72]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	490e      	ldr	r1, [pc, #56]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002652:	4313      	orrs	r3, r2
 8002654:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002656:	f000 f821 	bl	800269c <HAL_RCC_GetSysClockFreq>
 800265a:	4602      	mov	r2, r0
 800265c:	4b0b      	ldr	r3, [pc, #44]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	091b      	lsrs	r3, r3, #4
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	490a      	ldr	r1, [pc, #40]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 8002668:	5ccb      	ldrb	r3, [r1, r3]
 800266a:	fa22 f303 	lsr.w	r3, r2, r3
 800266e:	4a09      	ldr	r2, [pc, #36]	; (8002694 <HAL_RCC_ClockConfig+0x1cc>)
 8002670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002672:	4b09      	ldr	r3, [pc, #36]	; (8002698 <HAL_RCC_ClockConfig+0x1d0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7fe fc32 	bl	8000ee0 <HAL_InitTick>

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40022000 	.word	0x40022000
 800268c:	40021000 	.word	0x40021000
 8002690:	080055dc 	.word	0x080055dc
 8002694:	20000010 	.word	0x20000010
 8002698:	20000014 	.word	0x20000014

0800269c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	2300      	movs	r3, #0
 80026a8:	60bb      	str	r3, [r7, #8]
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	2300      	movs	r3, #0
 80026b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026b6:	4b1e      	ldr	r3, [pc, #120]	; (8002730 <HAL_RCC_GetSysClockFreq+0x94>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f003 030c 	and.w	r3, r3, #12
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d002      	beq.n	80026cc <HAL_RCC_GetSysClockFreq+0x30>
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d003      	beq.n	80026d2 <HAL_RCC_GetSysClockFreq+0x36>
 80026ca:	e027      	b.n	800271c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026cc:	4b19      	ldr	r3, [pc, #100]	; (8002734 <HAL_RCC_GetSysClockFreq+0x98>)
 80026ce:	613b      	str	r3, [r7, #16]
      break;
 80026d0:	e027      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	0c9b      	lsrs	r3, r3, #18
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	4a17      	ldr	r2, [pc, #92]	; (8002738 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026dc:	5cd3      	ldrb	r3, [r2, r3]
 80026de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d010      	beq.n	800270c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026ea:	4b11      	ldr	r3, [pc, #68]	; (8002730 <HAL_RCC_GetSysClockFreq+0x94>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	0c5b      	lsrs	r3, r3, #17
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	4a11      	ldr	r2, [pc, #68]	; (800273c <HAL_RCC_GetSysClockFreq+0xa0>)
 80026f6:	5cd3      	ldrb	r3, [r2, r3]
 80026f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a0d      	ldr	r2, [pc, #52]	; (8002734 <HAL_RCC_GetSysClockFreq+0x98>)
 80026fe:	fb03 f202 	mul.w	r2, r3, r2
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	fbb2 f3f3 	udiv	r3, r2, r3
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	e004      	b.n	8002716 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a0c      	ldr	r2, [pc, #48]	; (8002740 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002710:	fb02 f303 	mul.w	r3, r2, r3
 8002714:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	613b      	str	r3, [r7, #16]
      break;
 800271a:	e002      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800271c:	4b05      	ldr	r3, [pc, #20]	; (8002734 <HAL_RCC_GetSysClockFreq+0x98>)
 800271e:	613b      	str	r3, [r7, #16]
      break;
 8002720:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002722:	693b      	ldr	r3, [r7, #16]
}
 8002724:	4618      	mov	r0, r3
 8002726:	371c      	adds	r7, #28
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	40021000 	.word	0x40021000
 8002734:	007a1200 	.word	0x007a1200
 8002738:	080055f4 	.word	0x080055f4
 800273c:	08005604 	.word	0x08005604
 8002740:	003d0900 	.word	0x003d0900

08002744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002748:	4b02      	ldr	r3, [pc, #8]	; (8002754 <HAL_RCC_GetHCLKFreq+0x10>)
 800274a:	681b      	ldr	r3, [r3, #0]
}
 800274c:	4618      	mov	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr
 8002754:	20000010 	.word	0x20000010

08002758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800275c:	f7ff fff2 	bl	8002744 <HAL_RCC_GetHCLKFreq>
 8002760:	4602      	mov	r2, r0
 8002762:	4b05      	ldr	r3, [pc, #20]	; (8002778 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	0adb      	lsrs	r3, r3, #11
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	4903      	ldr	r1, [pc, #12]	; (800277c <HAL_RCC_GetPCLK2Freq+0x24>)
 800276e:	5ccb      	ldrb	r3, [r1, r3]
 8002770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002774:	4618      	mov	r0, r3
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40021000 	.word	0x40021000
 800277c:	080055ec 	.word	0x080055ec

08002780 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002788:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <RCC_Delay+0x34>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a0a      	ldr	r2, [pc, #40]	; (80027b8 <RCC_Delay+0x38>)
 800278e:	fba2 2303 	umull	r2, r3, r2, r3
 8002792:	0a5b      	lsrs	r3, r3, #9
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	fb02 f303 	mul.w	r3, r2, r3
 800279a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800279c:	bf00      	nop
  }
  while (Delay --);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1e5a      	subs	r2, r3, #1
 80027a2:	60fa      	str	r2, [r7, #12]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1f9      	bne.n	800279c <RCC_Delay+0x1c>
}
 80027a8:	bf00      	nop
 80027aa:	bf00      	nop
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr
 80027b4:	20000010 	.word	0x20000010
 80027b8:	10624dd3 	.word	0x10624dd3

080027bc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	2300      	movs	r3, #0
 80027ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d07d      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80027d8:	2300      	movs	r3, #0
 80027da:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027dc:	4b4f      	ldr	r3, [pc, #316]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027de:	69db      	ldr	r3, [r3, #28]
 80027e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10d      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e8:	4b4c      	ldr	r3, [pc, #304]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	4a4b      	ldr	r2, [pc, #300]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f2:	61d3      	str	r3, [r2, #28]
 80027f4:	4b49      	ldr	r3, [pc, #292]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002800:	2301      	movs	r3, #1
 8002802:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002804:	4b46      	ldr	r3, [pc, #280]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280c:	2b00      	cmp	r3, #0
 800280e:	d118      	bne.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002810:	4b43      	ldr	r3, [pc, #268]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a42      	ldr	r2, [pc, #264]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800281a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800281c:	f7fe fba2 	bl	8000f64 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002822:	e008      	b.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002824:	f7fe fb9e 	bl	8000f64 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b64      	cmp	r3, #100	; 0x64
 8002830:	d901      	bls.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e06d      	b.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002836:	4b3a      	ldr	r3, [pc, #232]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f0      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002842:	4b36      	ldr	r3, [pc, #216]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800284a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d02e      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	429a      	cmp	r2, r3
 800285e:	d027      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002860:	4b2e      	ldr	r3, [pc, #184]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002868:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800286a:	4b2e      	ldr	r3, [pc, #184]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800286c:	2201      	movs	r2, #1
 800286e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002870:	4b2c      	ldr	r3, [pc, #176]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002876:	4a29      	ldr	r2, [pc, #164]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d014      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002886:	f7fe fb6d 	bl	8000f64 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800288c:	e00a      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288e:	f7fe fb69 	bl	8000f64 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	f241 3288 	movw	r2, #5000	; 0x1388
 800289c:	4293      	cmp	r3, r2
 800289e:	d901      	bls.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e036      	b.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a4:	4b1d      	ldr	r3, [pc, #116]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0ee      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028b0:	4b1a      	ldr	r3, [pc, #104]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	4917      	ldr	r1, [pc, #92]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028c2:	7dfb      	ldrb	r3, [r7, #23]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d105      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c8:	4b14      	ldr	r3, [pc, #80]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	4a13      	ldr	r2, [pc, #76]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028e0:	4b0e      	ldr	r3, [pc, #56]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	490b      	ldr	r1, [pc, #44]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0310 	and.w	r3, r3, #16
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d008      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028fe:	4b07      	ldr	r3, [pc, #28]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	4904      	ldr	r1, [pc, #16]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290c:	4313      	orrs	r3, r2
 800290e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40021000 	.word	0x40021000
 8002920:	40007000 	.word	0x40007000
 8002924:	42420440 	.word	0x42420440

08002928 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b088      	sub	sp, #32
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	2300      	movs	r3, #0
 8002936:	61fb      	str	r3, [r7, #28]
 8002938:	2300      	movs	r3, #0
 800293a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	2300      	movs	r3, #0
 8002942:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b10      	cmp	r3, #16
 8002948:	d00a      	beq.n	8002960 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b10      	cmp	r3, #16
 800294e:	f200 808a 	bhi.w	8002a66 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d045      	beq.n	80029e4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d075      	beq.n	8002a4a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800295e:	e082      	b.n	8002a66 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002960:	4b46      	ldr	r3, [pc, #280]	; (8002a7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002966:	4b45      	ldr	r3, [pc, #276]	; (8002a7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d07b      	beq.n	8002a6a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	0c9b      	lsrs	r3, r3, #18
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	4a41      	ldr	r2, [pc, #260]	; (8002a80 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800297c:	5cd3      	ldrb	r3, [r2, r3]
 800297e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d015      	beq.n	80029b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800298a:	4b3c      	ldr	r3, [pc, #240]	; (8002a7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	0c5b      	lsrs	r3, r3, #17
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	4a3b      	ldr	r2, [pc, #236]	; (8002a84 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002996:	5cd3      	ldrb	r3, [r2, r3]
 8002998:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00d      	beq.n	80029c0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80029a4:	4a38      	ldr	r2, [pc, #224]	; (8002a88 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	fb02 f303 	mul.w	r3, r2, r3
 80029b2:	61fb      	str	r3, [r7, #28]
 80029b4:	e004      	b.n	80029c0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	4a34      	ldr	r2, [pc, #208]	; (8002a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80029ba:	fb02 f303 	mul.w	r3, r2, r3
 80029be:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80029c0:	4b2e      	ldr	r3, [pc, #184]	; (8002a7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029cc:	d102      	bne.n	80029d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	61bb      	str	r3, [r7, #24]
      break;
 80029d2:	e04a      	b.n	8002a6a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	4a2d      	ldr	r2, [pc, #180]	; (8002a90 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80029da:	fba2 2303 	umull	r2, r3, r2, r3
 80029de:	085b      	lsrs	r3, r3, #1
 80029e0:	61bb      	str	r3, [r7, #24]
      break;
 80029e2:	e042      	b.n	8002a6a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80029e4:	4b25      	ldr	r3, [pc, #148]	; (8002a7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029f4:	d108      	bne.n	8002a08 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002a00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a04:	61bb      	str	r3, [r7, #24]
 8002a06:	e01f      	b.n	8002a48 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a12:	d109      	bne.n	8002a28 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002a14:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002a20:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002a24:	61bb      	str	r3, [r7, #24]
 8002a26:	e00f      	b.n	8002a48 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a32:	d11c      	bne.n	8002a6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002a34:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d016      	beq.n	8002a6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002a40:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002a44:	61bb      	str	r3, [r7, #24]
      break;
 8002a46:	e012      	b.n	8002a6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002a48:	e011      	b.n	8002a6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002a4a:	f7ff fe85 	bl	8002758 <HAL_RCC_GetPCLK2Freq>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	0b9b      	lsrs	r3, r3, #14
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a62:	61bb      	str	r3, [r7, #24]
      break;
 8002a64:	e004      	b.n	8002a70 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002a66:	bf00      	nop
 8002a68:	e002      	b.n	8002a70 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002a6a:	bf00      	nop
 8002a6c:	e000      	b.n	8002a70 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002a6e:	bf00      	nop
    }
  }
  return (frequency);
 8002a70:	69bb      	ldr	r3, [r7, #24]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3720      	adds	r7, #32
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	08005608 	.word	0x08005608
 8002a84:	08005618 	.word	0x08005618
 8002a88:	007a1200 	.word	0x007a1200
 8002a8c:	003d0900 	.word	0x003d0900
 8002a90:	aaaaaaab 	.word	0xaaaaaaab

08002a94 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e07a      	b.n	8002ba0 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	7c5b      	ldrb	r3, [r3, #17]
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d105      	bne.n	8002ac0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7fe f8f6 	bl	8000cac <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f9be 	bl	8002e48 <HAL_RTC_WaitForSynchro>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d004      	beq.n	8002adc <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2204      	movs	r2, #4
 8002ad6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e061      	b.n	8002ba0 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 fa77 	bl	8002fd0 <RTC_EnterInitMode>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d004      	beq.n	8002af2 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2204      	movs	r2, #4
 8002aec:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e056      	b.n	8002ba0 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0207 	bic.w	r2, r2, #7
 8002b00:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d005      	beq.n	8002b16 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002b0a:	4b27      	ldr	r3, [pc, #156]	; (8002ba8 <HAL_RTC_Init+0x114>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	4a26      	ldr	r2, [pc, #152]	; (8002ba8 <HAL_RTC_Init+0x114>)
 8002b10:	f023 0301 	bic.w	r3, r3, #1
 8002b14:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002b16:	4b24      	ldr	r3, [pc, #144]	; (8002ba8 <HAL_RTC_Init+0x114>)
 8002b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	4921      	ldr	r1, [pc, #132]	; (8002ba8 <HAL_RTC_Init+0x114>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b30:	d003      	beq.n	8002b3a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	e00e      	b.n	8002b58 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002b3a:	2001      	movs	r0, #1
 8002b3c:	f7ff fef4 	bl	8002928 <HAL_RCCEx_GetPeriphCLKFreq>
 8002b40:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d104      	bne.n	8002b52 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2204      	movs	r2, #4
 8002b4c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e026      	b.n	8002ba0 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	3b01      	subs	r3, #1
 8002b56:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	0c1a      	lsrs	r2, r3, #16
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f002 020f 	and.w	r2, r2, #15
 8002b64:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	b292      	uxth	r2, r2
 8002b6e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 fa55 	bl	8003020 <RTC_ExitInitMode>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d004      	beq.n	8002b86 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2204      	movs	r2, #4
 8002b80:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e00c      	b.n	8002ba0 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
  }
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40006c00 	.word	0x40006c00

08002bac <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002bac:	b590      	push	{r4, r7, lr}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d002      	beq.n	8002bcc <HAL_RTC_SetTime+0x20>
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e080      	b.n	8002cd2 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	7c1b      	ldrb	r3, [r3, #16]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_RTC_SetTime+0x30>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e07a      	b.n	8002cd2 <HAL_RTC_SetTime+0x126>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2201      	movs	r2, #1
 8002be0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2202      	movs	r2, #2
 8002be6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d113      	bne.n	8002c16 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002bf8:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	785b      	ldrb	r3, [r3, #1]
 8002c00:	4619      	mov	r1, r3
 8002c02:	460b      	mov	r3, r1
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	1a5b      	subs	r3, r3, r1
 8002c08:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002c0a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002c10:	4413      	add	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	e01e      	b.n	8002c54 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 fa28 	bl	8003070 <RTC_Bcd2ToByte>
 8002c20:	4603      	mov	r3, r0
 8002c22:	461a      	mov	r2, r3
 8002c24:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002c28:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	785b      	ldrb	r3, [r3, #1]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 fa1d 	bl	8003070 <RTC_Bcd2ToByte>
 8002c36:	4603      	mov	r3, r0
 8002c38:	461a      	mov	r2, r3
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002c42:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	789b      	ldrb	r3, [r3, #2]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f000 fa11 	bl	8003070 <RTC_Bcd2ToByte>
 8002c4e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002c50:	4423      	add	r3, r4
 8002c52:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002c54:	6979      	ldr	r1, [r7, #20]
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 f953 	bl	8002f02 <RTC_WriteTimeCounter>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d007      	beq.n	8002c72 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2204      	movs	r2, #4
 8002c66:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e02f      	b.n	8002cd2 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0205 	bic.w	r2, r2, #5
 8002c80:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f964 	bl	8002f50 <RTC_ReadAlarmCounter>
 8002c88:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c90:	d018      	beq.n	8002cc4 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d214      	bcs.n	8002cc4 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002ca0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002ca4:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002ca6:	6939      	ldr	r1, [r7, #16]
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 f96a 	bl	8002f82 <RTC_WriteAlarmCounter>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d007      	beq.n	8002cc4 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2204      	movs	r2, #4
 8002cb8:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e006      	b.n	8002cd2 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
  }
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	371c      	adds	r7, #28
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd90      	pop	{r4, r7, pc}
	...

08002cdc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b088      	sub	sp, #32
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61fb      	str	r3, [r7, #28]
 8002cec:	2300      	movs	r3, #0
 8002cee:	61bb      	str	r3, [r7, #24]
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <HAL_RTC_SetDate+0x24>
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e097      	b.n	8002e34 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	7c1b      	ldrb	r3, [r3, #16]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <HAL_RTC_SetDate+0x34>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e091      	b.n	8002e34 <HAL_RTC_SetDate+0x158>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2201      	movs	r2, #1
 8002d14:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2202      	movs	r2, #2
 8002d1a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10c      	bne.n	8002d3c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	78da      	ldrb	r2, [r3, #3]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	785a      	ldrb	r2, [r3, #1]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	789a      	ldrb	r2, [r3, #2]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	739a      	strb	r2, [r3, #14]
 8002d3a:	e01a      	b.n	8002d72 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	78db      	ldrb	r3, [r3, #3]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f000 f995 	bl	8003070 <RTC_Bcd2ToByte>
 8002d46:	4603      	mov	r3, r0
 8002d48:	461a      	mov	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	785b      	ldrb	r3, [r3, #1]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 f98c 	bl	8003070 <RTC_Bcd2ToByte>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	789b      	ldrb	r3, [r3, #2]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 f983 	bl	8003070 <RTC_Bcd2ToByte>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	7bdb      	ldrb	r3, [r3, #15]
 8002d76:	4618      	mov	r0, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	7b59      	ldrb	r1, [r3, #13]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	7b9b      	ldrb	r3, [r3, #14]
 8002d80:	461a      	mov	r2, r3
 8002d82:	f000 f993 	bl	80030ac <RTC_WeekDayNum>
 8002d86:	4603      	mov	r3, r0
 8002d88:	461a      	mov	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	7b1a      	ldrb	r2, [r3, #12]
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 f883 	bl	8002ea2 <RTC_ReadTimeCounter>
 8002d9c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	4a26      	ldr	r2, [pc, #152]	; (8002e3c <HAL_RTC_SetDate+0x160>)
 8002da2:	fba2 2303 	umull	r2, r3, r2, r3
 8002da6:	0adb      	lsrs	r3, r3, #11
 8002da8:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2b18      	cmp	r3, #24
 8002dae:	d93a      	bls.n	8002e26 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	4a23      	ldr	r2, [pc, #140]	; (8002e40 <HAL_RTC_SetDate+0x164>)
 8002db4:	fba2 2303 	umull	r2, r3, r2, r3
 8002db8:	091b      	lsrs	r3, r3, #4
 8002dba:	4a22      	ldr	r2, [pc, #136]	; (8002e44 <HAL_RTC_SetDate+0x168>)
 8002dbc:	fb02 f303 	mul.w	r3, r2, r3
 8002dc0:	69fa      	ldr	r2, [r7, #28]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002dc6:	69f9      	ldr	r1, [r7, #28]
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 f89a 	bl	8002f02 <RTC_WriteTimeCounter>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d007      	beq.n	8002de4 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2204      	movs	r2, #4
 8002dd8:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e027      	b.n	8002e34 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f000 f8b3 	bl	8002f50 <RTC_ReadAlarmCounter>
 8002dea:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df2:	d018      	beq.n	8002e26 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d214      	bcs.n	8002e26 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002e02:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002e06:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002e08:	69b9      	ldr	r1, [r7, #24]
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f8b9 	bl	8002f82 <RTC_WriteAlarmCounter>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d007      	beq.n	8002e26 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2204      	movs	r2, #4
 8002e1a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e006      	b.n	8002e34 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3720      	adds	r7, #32
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	91a2b3c5 	.word	0x91a2b3c5
 8002e40:	aaaaaaab 	.word	0xaaaaaaab
 8002e44:	00015180 	.word	0x00015180

08002e48 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e01d      	b.n	8002e9a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0208 	bic.w	r2, r2, #8
 8002e6c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002e6e:	f7fe f879 	bl	8000f64 <HAL_GetTick>
 8002e72:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002e74:	e009      	b.n	8002e8a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002e76:	f7fe f875 	bl	8000f64 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e84:	d901      	bls.n	8002e8a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e007      	b.n	8002e9a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0ee      	beq.n	8002e76 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b087      	sub	sp, #28
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	827b      	strh	r3, [r7, #18]
 8002eae:	2300      	movs	r3, #0
 8002eb0:	823b      	strh	r3, [r7, #16]
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	69db      	ldr	r3, [r3, #28]
 8002ec8:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8002ed2:	8a7a      	ldrh	r2, [r7, #18]
 8002ed4:	8a3b      	ldrh	r3, [r7, #16]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d008      	beq.n	8002eec <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8002eda:	8a3b      	ldrh	r3, [r7, #16]
 8002edc:	041a      	lsls	r2, r3, #16
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	e004      	b.n	8002ef6 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002eec:	8a7b      	ldrh	r3, [r7, #18]
 8002eee:	041a      	lsls	r2, r3, #16
 8002ef0:	89fb      	ldrh	r3, [r7, #14]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8002ef6:	697b      	ldr	r3, [r7, #20]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	371c      	adds	r7, #28
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr

08002f02 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
 8002f0a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f85d 	bl	8002fd0 <RTC_EnterInitMode>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d002      	beq.n	8002f22 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	73fb      	strb	r3, [r7, #15]
 8002f20:	e011      	b.n	8002f46 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	0c12      	lsrs	r2, r2, #16
 8002f2a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	b292      	uxth	r2, r2
 8002f34:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f872 	bl	8003020 <RTC_ExitInitMode>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	81fb      	strh	r3, [r7, #14]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8002f70:	89fb      	ldrh	r3, [r7, #14]
 8002f72:	041a      	lsls	r2, r3, #16
 8002f74:	89bb      	ldrh	r3, [r7, #12]
 8002f76:	4313      	orrs	r3, r2
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr

08002f82 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b084      	sub	sp, #16
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f81d 	bl	8002fd0 <RTC_EnterInitMode>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d002      	beq.n	8002fa2 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	73fb      	strb	r3, [r7, #15]
 8002fa0:	e011      	b.n	8002fc6 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	0c12      	lsrs	r2, r2, #16
 8002faa:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	b292      	uxth	r2, r2
 8002fb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f832 	bl	8003020 <RTC_ExitInitMode>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002fdc:	f7fd ffc2 	bl	8000f64 <HAL_GetTick>
 8002fe0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002fe2:	e009      	b.n	8002ff8 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002fe4:	f7fd ffbe 	bl	8000f64 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ff2:	d901      	bls.n	8002ff8 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e00f      	b.n	8003018 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f003 0320 	and.w	r3, r3, #32
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0ee      	beq.n	8002fe4 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f042 0210 	orr.w	r2, r2, #16
 8003014:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003028:	2300      	movs	r3, #0
 800302a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0210 	bic.w	r2, r2, #16
 800303a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800303c:	f7fd ff92 	bl	8000f64 <HAL_GetTick>
 8003040:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003042:	e009      	b.n	8003058 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003044:	f7fd ff8e 	bl	8000f64 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003052:	d901      	bls.n	8003058 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e007      	b.n	8003068 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f003 0320 	and.w	r3, r3, #32
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0ee      	beq.n	8003044 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800307a:	2300      	movs	r3, #0
 800307c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	091b      	lsrs	r3, r3, #4
 8003082:	b2db      	uxtb	r3, r3
 8003084:	461a      	mov	r2, r3
 8003086:	4613      	mov	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	b2da      	uxtb	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	b2db      	uxtb	r3, r3
 800309c:	4413      	add	r3, r2
 800309e:	b2db      	uxtb	r3, r3
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3714      	adds	r7, #20
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr
	...

080030ac <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	460b      	mov	r3, r1
 80030b6:	70fb      	strb	r3, [r7, #3]
 80030b8:	4613      	mov	r3, r2
 80030ba:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	60bb      	str	r3, [r7, #8]
 80030c0:	2300      	movs	r3, #0
 80030c2:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80030ca:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80030cc:	78fb      	ldrb	r3, [r7, #3]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d82d      	bhi.n	800312e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80030d2:	78fa      	ldrb	r2, [r7, #3]
 80030d4:	4613      	mov	r3, r2
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	4413      	add	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	1a9b      	subs	r3, r3, r2
 80030de:	4a2c      	ldr	r2, [pc, #176]	; (8003190 <RTC_WeekDayNum+0xe4>)
 80030e0:	fba2 2303 	umull	r2, r3, r2, r3
 80030e4:	085a      	lsrs	r2, r3, #1
 80030e6:	78bb      	ldrb	r3, [r7, #2]
 80030e8:	441a      	add	r2, r3
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	441a      	add	r2, r3
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	3b01      	subs	r3, #1
 80030f2:	089b      	lsrs	r3, r3, #2
 80030f4:	441a      	add	r2, r3
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	3b01      	subs	r3, #1
 80030fa:	4926      	ldr	r1, [pc, #152]	; (8003194 <RTC_WeekDayNum+0xe8>)
 80030fc:	fba1 1303 	umull	r1, r3, r1, r3
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	1ad2      	subs	r2, r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	3b01      	subs	r3, #1
 8003108:	4922      	ldr	r1, [pc, #136]	; (8003194 <RTC_WeekDayNum+0xe8>)
 800310a:	fba1 1303 	umull	r1, r3, r1, r3
 800310e:	09db      	lsrs	r3, r3, #7
 8003110:	4413      	add	r3, r2
 8003112:	1d1a      	adds	r2, r3, #4
 8003114:	4b20      	ldr	r3, [pc, #128]	; (8003198 <RTC_WeekDayNum+0xec>)
 8003116:	fba3 1302 	umull	r1, r3, r3, r2
 800311a:	1ad1      	subs	r1, r2, r3
 800311c:	0849      	lsrs	r1, r1, #1
 800311e:	440b      	add	r3, r1
 8003120:	0899      	lsrs	r1, r3, #2
 8003122:	460b      	mov	r3, r1
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	1a5b      	subs	r3, r3, r1
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	e029      	b.n	8003182 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800312e:	78fa      	ldrb	r2, [r7, #3]
 8003130:	4613      	mov	r3, r2
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	4413      	add	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	1a9b      	subs	r3, r3, r2
 800313a:	4a15      	ldr	r2, [pc, #84]	; (8003190 <RTC_WeekDayNum+0xe4>)
 800313c:	fba2 2303 	umull	r2, r3, r2, r3
 8003140:	085a      	lsrs	r2, r3, #1
 8003142:	78bb      	ldrb	r3, [r7, #2]
 8003144:	441a      	add	r2, r3
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	441a      	add	r2, r3
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	089b      	lsrs	r3, r3, #2
 800314e:	441a      	add	r2, r3
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	4910      	ldr	r1, [pc, #64]	; (8003194 <RTC_WeekDayNum+0xe8>)
 8003154:	fba1 1303 	umull	r1, r3, r1, r3
 8003158:	095b      	lsrs	r3, r3, #5
 800315a:	1ad2      	subs	r2, r2, r3
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	490d      	ldr	r1, [pc, #52]	; (8003194 <RTC_WeekDayNum+0xe8>)
 8003160:	fba1 1303 	umull	r1, r3, r1, r3
 8003164:	09db      	lsrs	r3, r3, #7
 8003166:	4413      	add	r3, r2
 8003168:	1c9a      	adds	r2, r3, #2
 800316a:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <RTC_WeekDayNum+0xec>)
 800316c:	fba3 1302 	umull	r1, r3, r3, r2
 8003170:	1ad1      	subs	r1, r2, r3
 8003172:	0849      	lsrs	r1, r1, #1
 8003174:	440b      	add	r3, r1
 8003176:	0899      	lsrs	r1, r3, #2
 8003178:	460b      	mov	r3, r1
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	1a5b      	subs	r3, r3, r1
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	b2db      	uxtb	r3, r3
}
 8003186:	4618      	mov	r0, r3
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr
 8003190:	38e38e39 	.word	0x38e38e39
 8003194:	51eb851f 	.word	0x51eb851f
 8003198:	24924925 	.word	0x24924925

0800319c <HAL_RTCEx_SetSecond_IT>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSecond_IT(RTC_HandleTypeDef *hrtc)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Check input parameters */
  if (hrtc == NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_RTCEx_SetSecond_IT+0x12>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e01a      	b.n	80031e4 <HAL_RTCEx_SetSecond_IT+0x48>
  }

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	7c1b      	ldrb	r3, [r3, #16]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d101      	bne.n	80031ba <HAL_RTCEx_SetSecond_IT+0x1e>
 80031b6:	2302      	movs	r3, #2
 80031b8:	e014      	b.n	80031e4 <HAL_RTCEx_SetSecond_IT+0x48>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	745a      	strb	r2, [r3, #17]

  /* Enable Second interruption */
  __HAL_RTC_SECOND_ENABLE_IT(hrtc, RTC_IT_SEC);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f042 0201 	orr.w	r2, r2, #1
 80031d4:	601a      	str	r2, [r3, #0]

  hrtc->State = HAL_RTC_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc80      	pop	{r7}
 80031ec:	4770      	bx	lr

080031ee <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b082      	sub	sp, #8
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d027      	beq.n	8003254 <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d020      	beq.n	8003254 <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00b      	beq.n	8003238 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f81b 	bl	800325c <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f06f 0204 	mvn.w	r2, #4
 800322e:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2204      	movs	r2, #4
 8003234:	745a      	strb	r2, [r3, #17]
 8003236:	e005      	b.n	8003244 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7fd fa5f 	bl	80006fc <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0201 	bic.w	r2, r2, #1
 8003252:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003254:	bf00      	nop
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	bc80      	pop	{r7}
 800326c:	4770      	bx	lr

0800326e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b082      	sub	sp, #8
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e076      	b.n	800336e <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	2b00      	cmp	r3, #0
 8003286:	d108      	bne.n	800329a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003290:	d009      	beq.n	80032a6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	61da      	str	r2, [r3, #28]
 8003298:	e005      	b.n	80032a6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d106      	bne.n	80032c6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7fd fd1f 	bl	8000d04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2202      	movs	r2, #2
 80032ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032dc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	431a      	orrs	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800332a:	ea42 0103 	orr.w	r1, r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003332:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	0c1a      	lsrs	r2, r3, #16
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f002 0204 	and.w	r2, r2, #4
 800334c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69da      	ldr	r2, [r3, #28]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800335c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b088      	sub	sp, #32
 800337a:	af00      	add	r7, sp, #0
 800337c:	60f8      	str	r0, [r7, #12]
 800337e:	60b9      	str	r1, [r7, #8]
 8003380:	603b      	str	r3, [r7, #0]
 8003382:	4613      	mov	r3, r2
 8003384:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003386:	2300      	movs	r3, #0
 8003388:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003390:	2b01      	cmp	r3, #1
 8003392:	d101      	bne.n	8003398 <HAL_SPI_Transmit+0x22>
 8003394:	2302      	movs	r3, #2
 8003396:	e12d      	b.n	80035f4 <HAL_SPI_Transmit+0x27e>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033a0:	f7fd fde0 	bl	8000f64 <HAL_GetTick>
 80033a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80033a6:	88fb      	ldrh	r3, [r7, #6]
 80033a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d002      	beq.n	80033bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80033b6:	2302      	movs	r3, #2
 80033b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033ba:	e116      	b.n	80035ea <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <HAL_SPI_Transmit+0x52>
 80033c2:	88fb      	ldrh	r3, [r7, #6]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d102      	bne.n	80033ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033cc:	e10d      	b.n	80035ea <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2203      	movs	r2, #3
 80033d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	88fa      	ldrh	r2, [r7, #6]
 80033e6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	88fa      	ldrh	r2, [r7, #6]
 80033ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003414:	d10f      	bne.n	8003436 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003424:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003434:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003440:	2b40      	cmp	r3, #64	; 0x40
 8003442:	d007      	beq.n	8003454 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003452:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800345c:	d14f      	bne.n	80034fe <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d002      	beq.n	800346c <HAL_SPI_Transmit+0xf6>
 8003466:	8afb      	ldrh	r3, [r7, #22]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d142      	bne.n	80034f2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003470:	881a      	ldrh	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347c:	1c9a      	adds	r2, r3, #2
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003486:	b29b      	uxth	r3, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003490:	e02f      	b.n	80034f2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b02      	cmp	r3, #2
 800349e:	d112      	bne.n	80034c6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a4:	881a      	ldrh	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b0:	1c9a      	adds	r2, r3, #2
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	3b01      	subs	r3, #1
 80034be:	b29a      	uxth	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80034c4:	e015      	b.n	80034f2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034c6:	f7fd fd4d 	bl	8000f64 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d803      	bhi.n	80034de <HAL_SPI_Transmit+0x168>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034dc:	d102      	bne.n	80034e4 <HAL_SPI_Transmit+0x16e>
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d106      	bne.n	80034f2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80034f0:	e07b      	b.n	80035ea <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1ca      	bne.n	8003492 <HAL_SPI_Transmit+0x11c>
 80034fc:	e050      	b.n	80035a0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <HAL_SPI_Transmit+0x196>
 8003506:	8afb      	ldrh	r3, [r7, #22]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d144      	bne.n	8003596 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	330c      	adds	r3, #12
 8003516:	7812      	ldrb	r2, [r2, #0]
 8003518:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003532:	e030      	b.n	8003596 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b02      	cmp	r3, #2
 8003540:	d113      	bne.n	800356a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	330c      	adds	r3, #12
 800354c:	7812      	ldrb	r2, [r2, #0]
 800354e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800355e:	b29b      	uxth	r3, r3
 8003560:	3b01      	subs	r3, #1
 8003562:	b29a      	uxth	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	86da      	strh	r2, [r3, #54]	; 0x36
 8003568:	e015      	b.n	8003596 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800356a:	f7fd fcfb 	bl	8000f64 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	429a      	cmp	r2, r3
 8003578:	d803      	bhi.n	8003582 <HAL_SPI_Transmit+0x20c>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003580:	d102      	bne.n	8003588 <HAL_SPI_Transmit+0x212>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d106      	bne.n	8003596 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003594:	e029      	b.n	80035ea <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800359a:	b29b      	uxth	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1c9      	bne.n	8003534 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	6839      	ldr	r1, [r7, #0]
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 f8b1 	bl	800370c <SPI_EndRxTxTransaction>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2220      	movs	r2, #32
 80035b4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10a      	bne.n	80035d4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035be:	2300      	movs	r3, #0
 80035c0:	613b      	str	r3, [r7, #16]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	613b      	str	r3, [r7, #16]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	613b      	str	r3, [r7, #16]
 80035d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d002      	beq.n	80035e2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	77fb      	strb	r3, [r7, #31]
 80035e0:	e003      	b.n	80035ea <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80035f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3720      	adds	r7, #32
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b088      	sub	sp, #32
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	603b      	str	r3, [r7, #0]
 8003608:	4613      	mov	r3, r2
 800360a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800360c:	f7fd fcaa 	bl	8000f64 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003614:	1a9b      	subs	r3, r3, r2
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	4413      	add	r3, r2
 800361a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800361c:	f7fd fca2 	bl	8000f64 <HAL_GetTick>
 8003620:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003622:	4b39      	ldr	r3, [pc, #228]	; (8003708 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	015b      	lsls	r3, r3, #5
 8003628:	0d1b      	lsrs	r3, r3, #20
 800362a:	69fa      	ldr	r2, [r7, #28]
 800362c:	fb02 f303 	mul.w	r3, r2, r3
 8003630:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003632:	e054      	b.n	80036de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363a:	d050      	beq.n	80036de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800363c:	f7fd fc92 	bl	8000f64 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	69fa      	ldr	r2, [r7, #28]
 8003648:	429a      	cmp	r2, r3
 800364a:	d902      	bls.n	8003652 <SPI_WaitFlagStateUntilTimeout+0x56>
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d13d      	bne.n	80036ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003660:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800366a:	d111      	bne.n	8003690 <SPI_WaitFlagStateUntilTimeout+0x94>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003674:	d004      	beq.n	8003680 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800367e:	d107      	bne.n	8003690 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800368e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003698:	d10f      	bne.n	80036ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e017      	b.n	80036fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	3b01      	subs	r3, #1
 80036dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	4013      	ands	r3, r2
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	bf0c      	ite	eq
 80036ee:	2301      	moveq	r3, #1
 80036f0:	2300      	movne	r3, #0
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	461a      	mov	r2, r3
 80036f6:	79fb      	ldrb	r3, [r7, #7]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d19b      	bne.n	8003634 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3720      	adds	r7, #32
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20000010 	.word	0x20000010

0800370c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af02      	add	r7, sp, #8
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2200      	movs	r2, #0
 8003720:	2180      	movs	r1, #128	; 0x80
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f7ff ff6a 	bl	80035fc <SPI_WaitFlagStateUntilTimeout>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d007      	beq.n	800373e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003732:	f043 0220 	orr.w	r2, r3, #32
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e000      	b.n	8003740 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e041      	b.n	80037de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d106      	bne.n	8003774 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7fd fb12 	bl	8000d98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3304      	adds	r3, #4
 8003784:	4619      	mov	r1, r3
 8003786:	4610      	mov	r0, r2
 8003788:	f000 fa74 	bl	8003c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d001      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e03a      	b.n	8003876 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0201 	orr.w	r2, r2, #1
 8003816:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a18      	ldr	r2, [pc, #96]	; (8003880 <HAL_TIM_Base_Start_IT+0x98>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d00e      	beq.n	8003840 <HAL_TIM_Base_Start_IT+0x58>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382a:	d009      	beq.n	8003840 <HAL_TIM_Base_Start_IT+0x58>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a14      	ldr	r2, [pc, #80]	; (8003884 <HAL_TIM_Base_Start_IT+0x9c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d004      	beq.n	8003840 <HAL_TIM_Base_Start_IT+0x58>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a13      	ldr	r2, [pc, #76]	; (8003888 <HAL_TIM_Base_Start_IT+0xa0>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d111      	bne.n	8003864 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2b06      	cmp	r3, #6
 8003850:	d010      	beq.n	8003874 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f042 0201 	orr.w	r2, r2, #1
 8003860:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003862:	e007      	b.n	8003874 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 0201 	orr.w	r2, r2, #1
 8003872:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr
 8003880:	40012c00 	.word	0x40012c00
 8003884:	40000400 	.word	0x40000400
 8003888:	40000800 	.word	0x40000800

0800388c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d122      	bne.n	80038e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d11b      	bne.n	80038e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f06f 0202 	mvn.w	r2, #2
 80038b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	f003 0303 	and.w	r3, r3, #3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f9b4 	bl	8003c3c <HAL_TIM_IC_CaptureCallback>
 80038d4:	e005      	b.n	80038e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f9a7 	bl	8003c2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 f9b6 	bl	8003c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	f003 0304 	and.w	r3, r3, #4
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d122      	bne.n	800393c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f003 0304 	and.w	r3, r3, #4
 8003900:	2b04      	cmp	r3, #4
 8003902:	d11b      	bne.n	800393c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f06f 0204 	mvn.w	r2, #4
 800390c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2202      	movs	r2, #2
 8003912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f98a 	bl	8003c3c <HAL_TIM_IC_CaptureCallback>
 8003928:	e005      	b.n	8003936 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f97d 	bl	8003c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f98c 	bl	8003c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b08      	cmp	r3, #8
 8003948:	d122      	bne.n	8003990 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b08      	cmp	r3, #8
 8003956:	d11b      	bne.n	8003990 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f06f 0208 	mvn.w	r2, #8
 8003960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2204      	movs	r2, #4
 8003966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f960 	bl	8003c3c <HAL_TIM_IC_CaptureCallback>
 800397c:	e005      	b.n	800398a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f953 	bl	8003c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f962 	bl	8003c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	f003 0310 	and.w	r3, r3, #16
 800399a:	2b10      	cmp	r3, #16
 800399c:	d122      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f003 0310 	and.w	r3, r3, #16
 80039a8:	2b10      	cmp	r3, #16
 80039aa:	d11b      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f06f 0210 	mvn.w	r2, #16
 80039b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2208      	movs	r2, #8
 80039ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f936 	bl	8003c3c <HAL_TIM_IC_CaptureCallback>
 80039d0:	e005      	b.n	80039de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f929 	bl	8003c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f938 	bl	8003c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d10e      	bne.n	8003a10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d107      	bne.n	8003a10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f06f 0201 	mvn.w	r2, #1
 8003a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7fc fe86 	bl	800071c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1a:	2b80      	cmp	r3, #128	; 0x80
 8003a1c:	d10e      	bne.n	8003a3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a28:	2b80      	cmp	r3, #128	; 0x80
 8003a2a:	d107      	bne.n	8003a3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 fa7b 	bl	8003f32 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a46:	2b40      	cmp	r3, #64	; 0x40
 8003a48:	d10e      	bne.n	8003a68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a54:	2b40      	cmp	r3, #64	; 0x40
 8003a56:	d107      	bne.n	8003a68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f8fc 	bl	8003c60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	f003 0320 	and.w	r3, r3, #32
 8003a72:	2b20      	cmp	r3, #32
 8003a74:	d10e      	bne.n	8003a94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f003 0320 	and.w	r3, r3, #32
 8003a80:	2b20      	cmp	r3, #32
 8003a82:	d107      	bne.n	8003a94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f06f 0220 	mvn.w	r2, #32
 8003a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 fa46 	bl	8003f20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a94:	bf00      	nop
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d101      	bne.n	8003ab8 <HAL_TIM_ConfigClockSource+0x1c>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	e0b4      	b.n	8003c22 <HAL_TIM_ConfigClockSource+0x186>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ade:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003af0:	d03e      	beq.n	8003b70 <HAL_TIM_ConfigClockSource+0xd4>
 8003af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003af6:	f200 8087 	bhi.w	8003c08 <HAL_TIM_ConfigClockSource+0x16c>
 8003afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003afe:	f000 8086 	beq.w	8003c0e <HAL_TIM_ConfigClockSource+0x172>
 8003b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b06:	d87f      	bhi.n	8003c08 <HAL_TIM_ConfigClockSource+0x16c>
 8003b08:	2b70      	cmp	r3, #112	; 0x70
 8003b0a:	d01a      	beq.n	8003b42 <HAL_TIM_ConfigClockSource+0xa6>
 8003b0c:	2b70      	cmp	r3, #112	; 0x70
 8003b0e:	d87b      	bhi.n	8003c08 <HAL_TIM_ConfigClockSource+0x16c>
 8003b10:	2b60      	cmp	r3, #96	; 0x60
 8003b12:	d050      	beq.n	8003bb6 <HAL_TIM_ConfigClockSource+0x11a>
 8003b14:	2b60      	cmp	r3, #96	; 0x60
 8003b16:	d877      	bhi.n	8003c08 <HAL_TIM_ConfigClockSource+0x16c>
 8003b18:	2b50      	cmp	r3, #80	; 0x50
 8003b1a:	d03c      	beq.n	8003b96 <HAL_TIM_ConfigClockSource+0xfa>
 8003b1c:	2b50      	cmp	r3, #80	; 0x50
 8003b1e:	d873      	bhi.n	8003c08 <HAL_TIM_ConfigClockSource+0x16c>
 8003b20:	2b40      	cmp	r3, #64	; 0x40
 8003b22:	d058      	beq.n	8003bd6 <HAL_TIM_ConfigClockSource+0x13a>
 8003b24:	2b40      	cmp	r3, #64	; 0x40
 8003b26:	d86f      	bhi.n	8003c08 <HAL_TIM_ConfigClockSource+0x16c>
 8003b28:	2b30      	cmp	r3, #48	; 0x30
 8003b2a:	d064      	beq.n	8003bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8003b2c:	2b30      	cmp	r3, #48	; 0x30
 8003b2e:	d86b      	bhi.n	8003c08 <HAL_TIM_ConfigClockSource+0x16c>
 8003b30:	2b20      	cmp	r3, #32
 8003b32:	d060      	beq.n	8003bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8003b34:	2b20      	cmp	r3, #32
 8003b36:	d867      	bhi.n	8003c08 <HAL_TIM_ConfigClockSource+0x16c>
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d05c      	beq.n	8003bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8003b3c:	2b10      	cmp	r3, #16
 8003b3e:	d05a      	beq.n	8003bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8003b40:	e062      	b.n	8003c08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b52:	f000 f968 	bl	8003e26 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	609a      	str	r2, [r3, #8]
      break;
 8003b6e:	e04f      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b80:	f000 f951 	bl	8003e26 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b92:	609a      	str	r2, [r3, #8]
      break;
 8003b94:	e03c      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	f000 f8c8 	bl	8003d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2150      	movs	r1, #80	; 0x50
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 f91f 	bl	8003df2 <TIM_ITRx_SetConfig>
      break;
 8003bb4:	e02c      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	f000 f8e6 	bl	8003d94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2160      	movs	r1, #96	; 0x60
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 f90f 	bl	8003df2 <TIM_ITRx_SetConfig>
      break;
 8003bd4:	e01c      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003be2:	461a      	mov	r2, r3
 8003be4:	f000 f8a8 	bl	8003d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2140      	movs	r1, #64	; 0x40
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 f8ff 	bl	8003df2 <TIM_ITRx_SetConfig>
      break;
 8003bf4:	e00c      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4619      	mov	r1, r3
 8003c00:	4610      	mov	r0, r2
 8003c02:	f000 f8f6 	bl	8003df2 <TIM_ITRx_SetConfig>
      break;
 8003c06:	e003      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c0c:	e000      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b083      	sub	sp, #12
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bc80      	pop	{r7}
 8003c3a:	4770      	bx	lr

08003c3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bc80      	pop	{r7}
 8003c4c:	4770      	bx	lr

08003c4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr

08003c60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bc80      	pop	{r7}
 8003c70:	4770      	bx	lr
	...

08003c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a29      	ldr	r2, [pc, #164]	; (8003d2c <TIM_Base_SetConfig+0xb8>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d00b      	beq.n	8003ca4 <TIM_Base_SetConfig+0x30>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c92:	d007      	beq.n	8003ca4 <TIM_Base_SetConfig+0x30>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a26      	ldr	r2, [pc, #152]	; (8003d30 <TIM_Base_SetConfig+0xbc>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d003      	beq.n	8003ca4 <TIM_Base_SetConfig+0x30>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a25      	ldr	r2, [pc, #148]	; (8003d34 <TIM_Base_SetConfig+0xc0>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d108      	bne.n	8003cb6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a1c      	ldr	r2, [pc, #112]	; (8003d2c <TIM_Base_SetConfig+0xb8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d00b      	beq.n	8003cd6 <TIM_Base_SetConfig+0x62>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc4:	d007      	beq.n	8003cd6 <TIM_Base_SetConfig+0x62>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a19      	ldr	r2, [pc, #100]	; (8003d30 <TIM_Base_SetConfig+0xbc>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d003      	beq.n	8003cd6 <TIM_Base_SetConfig+0x62>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a18      	ldr	r2, [pc, #96]	; (8003d34 <TIM_Base_SetConfig+0xc0>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d108      	bne.n	8003ce8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a07      	ldr	r2, [pc, #28]	; (8003d2c <TIM_Base_SetConfig+0xb8>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d103      	bne.n	8003d1c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	691a      	ldr	r2, [r3, #16]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	615a      	str	r2, [r3, #20]
}
 8003d22:	bf00      	nop
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr
 8003d2c:	40012c00 	.word	0x40012c00
 8003d30:	40000400 	.word	0x40000400
 8003d34:	40000800 	.word	0x40000800

08003d38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	f023 0201 	bic.w	r2, r3, #1
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	011b      	lsls	r3, r3, #4
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f023 030a 	bic.w	r3, r3, #10
 8003d74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	621a      	str	r2, [r3, #32]
}
 8003d8a:	bf00      	nop
 8003d8c:	371c      	adds	r7, #28
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bc80      	pop	{r7}
 8003d92:	4770      	bx	lr

08003d94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	f023 0210 	bic.w	r2, r3, #16
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	031b      	lsls	r3, r3, #12
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003dd0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	621a      	str	r2, [r3, #32]
}
 8003de8:	bf00      	nop
 8003dea:	371c      	adds	r7, #28
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bc80      	pop	{r7}
 8003df0:	4770      	bx	lr

08003df2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b085      	sub	sp, #20
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
 8003dfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f043 0307 	orr.w	r3, r3, #7
 8003e14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	609a      	str	r2, [r3, #8]
}
 8003e1c:	bf00      	nop
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bc80      	pop	{r7}
 8003e24:	4770      	bx	lr

08003e26 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b087      	sub	sp, #28
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	60f8      	str	r0, [r7, #12]
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	607a      	str	r2, [r7, #4]
 8003e32:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e40:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	021a      	lsls	r2, r3, #8
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	609a      	str	r2, [r3, #8]
}
 8003e5a:	bf00      	nop
 8003e5c:	371c      	adds	r7, #28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr

08003e64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e046      	b.n	8003f0a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a16      	ldr	r2, [pc, #88]	; (8003f14 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d00e      	beq.n	8003ede <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec8:	d009      	beq.n	8003ede <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a12      	ldr	r2, [pc, #72]	; (8003f18 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d004      	beq.n	8003ede <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a10      	ldr	r2, [pc, #64]	; (8003f1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d10c      	bne.n	8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ee4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bc80      	pop	{r7}
 8003f12:	4770      	bx	lr
 8003f14:	40012c00 	.word	0x40012c00
 8003f18:	40000400 	.word	0x40000400
 8003f1c:	40000800 	.word	0x40000800

08003f20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bc80      	pop	{r7}
 8003f30:	4770      	bx	lr

08003f32 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b083      	sub	sp, #12
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f3a:	bf00      	nop
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr

08003f44 <__itoa>:
 8003f44:	1e93      	subs	r3, r2, #2
 8003f46:	2b22      	cmp	r3, #34	; 0x22
 8003f48:	b510      	push	{r4, lr}
 8003f4a:	460c      	mov	r4, r1
 8003f4c:	d904      	bls.n	8003f58 <__itoa+0x14>
 8003f4e:	2300      	movs	r3, #0
 8003f50:	461c      	mov	r4, r3
 8003f52:	700b      	strb	r3, [r1, #0]
 8003f54:	4620      	mov	r0, r4
 8003f56:	bd10      	pop	{r4, pc}
 8003f58:	2a0a      	cmp	r2, #10
 8003f5a:	d109      	bne.n	8003f70 <__itoa+0x2c>
 8003f5c:	2800      	cmp	r0, #0
 8003f5e:	da07      	bge.n	8003f70 <__itoa+0x2c>
 8003f60:	232d      	movs	r3, #45	; 0x2d
 8003f62:	700b      	strb	r3, [r1, #0]
 8003f64:	2101      	movs	r1, #1
 8003f66:	4240      	negs	r0, r0
 8003f68:	4421      	add	r1, r4
 8003f6a:	f000 f805 	bl	8003f78 <__utoa>
 8003f6e:	e7f1      	b.n	8003f54 <__itoa+0x10>
 8003f70:	2100      	movs	r1, #0
 8003f72:	e7f9      	b.n	8003f68 <__itoa+0x24>

08003f74 <itoa>:
 8003f74:	f7ff bfe6 	b.w	8003f44 <__itoa>

08003f78 <__utoa>:
 8003f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f7a:	b08b      	sub	sp, #44	; 0x2c
 8003f7c:	4605      	mov	r5, r0
 8003f7e:	460b      	mov	r3, r1
 8003f80:	466e      	mov	r6, sp
 8003f82:	4c1d      	ldr	r4, [pc, #116]	; (8003ff8 <__utoa+0x80>)
 8003f84:	f104 0c20 	add.w	ip, r4, #32
 8003f88:	4637      	mov	r7, r6
 8003f8a:	6820      	ldr	r0, [r4, #0]
 8003f8c:	6861      	ldr	r1, [r4, #4]
 8003f8e:	3408      	adds	r4, #8
 8003f90:	c703      	stmia	r7!, {r0, r1}
 8003f92:	4564      	cmp	r4, ip
 8003f94:	463e      	mov	r6, r7
 8003f96:	d1f7      	bne.n	8003f88 <__utoa+0x10>
 8003f98:	7921      	ldrb	r1, [r4, #4]
 8003f9a:	6820      	ldr	r0, [r4, #0]
 8003f9c:	7139      	strb	r1, [r7, #4]
 8003f9e:	1e91      	subs	r1, r2, #2
 8003fa0:	2922      	cmp	r1, #34	; 0x22
 8003fa2:	6038      	str	r0, [r7, #0]
 8003fa4:	f04f 0100 	mov.w	r1, #0
 8003fa8:	d904      	bls.n	8003fb4 <__utoa+0x3c>
 8003faa:	7019      	strb	r1, [r3, #0]
 8003fac:	460b      	mov	r3, r1
 8003fae:	4618      	mov	r0, r3
 8003fb0:	b00b      	add	sp, #44	; 0x2c
 8003fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fb4:	1e58      	subs	r0, r3, #1
 8003fb6:	4684      	mov	ip, r0
 8003fb8:	fbb5 f7f2 	udiv	r7, r5, r2
 8003fbc:	fb02 5617 	mls	r6, r2, r7, r5
 8003fc0:	3628      	adds	r6, #40	; 0x28
 8003fc2:	446e      	add	r6, sp
 8003fc4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8003fc8:	460c      	mov	r4, r1
 8003fca:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8003fce:	462e      	mov	r6, r5
 8003fd0:	42b2      	cmp	r2, r6
 8003fd2:	463d      	mov	r5, r7
 8003fd4:	f101 0101 	add.w	r1, r1, #1
 8003fd8:	d9ee      	bls.n	8003fb8 <__utoa+0x40>
 8003fda:	2200      	movs	r2, #0
 8003fdc:	545a      	strb	r2, [r3, r1]
 8003fde:	1919      	adds	r1, r3, r4
 8003fe0:	1aa5      	subs	r5, r4, r2
 8003fe2:	42aa      	cmp	r2, r5
 8003fe4:	dae3      	bge.n	8003fae <__utoa+0x36>
 8003fe6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003fea:	780e      	ldrb	r6, [r1, #0]
 8003fec:	3201      	adds	r2, #1
 8003fee:	7006      	strb	r6, [r0, #0]
 8003ff0:	f801 5901 	strb.w	r5, [r1], #-1
 8003ff4:	e7f4      	b.n	8003fe0 <__utoa+0x68>
 8003ff6:	bf00      	nop
 8003ff8:	0800561a 	.word	0x0800561a

08003ffc <memset>:
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	4402      	add	r2, r0
 8004000:	4293      	cmp	r3, r2
 8004002:	d100      	bne.n	8004006 <memset+0xa>
 8004004:	4770      	bx	lr
 8004006:	f803 1b01 	strb.w	r1, [r3], #1
 800400a:	e7f9      	b.n	8004000 <memset+0x4>

0800400c <__libc_init_array>:
 800400c:	b570      	push	{r4, r5, r6, lr}
 800400e:	2600      	movs	r6, #0
 8004010:	4d0c      	ldr	r5, [pc, #48]	; (8004044 <__libc_init_array+0x38>)
 8004012:	4c0d      	ldr	r4, [pc, #52]	; (8004048 <__libc_init_array+0x3c>)
 8004014:	1b64      	subs	r4, r4, r5
 8004016:	10a4      	asrs	r4, r4, #2
 8004018:	42a6      	cmp	r6, r4
 800401a:	d109      	bne.n	8004030 <__libc_init_array+0x24>
 800401c:	f000 f81a 	bl	8004054 <_init>
 8004020:	2600      	movs	r6, #0
 8004022:	4d0a      	ldr	r5, [pc, #40]	; (800404c <__libc_init_array+0x40>)
 8004024:	4c0a      	ldr	r4, [pc, #40]	; (8004050 <__libc_init_array+0x44>)
 8004026:	1b64      	subs	r4, r4, r5
 8004028:	10a4      	asrs	r4, r4, #2
 800402a:	42a6      	cmp	r6, r4
 800402c:	d105      	bne.n	800403a <__libc_init_array+0x2e>
 800402e:	bd70      	pop	{r4, r5, r6, pc}
 8004030:	f855 3b04 	ldr.w	r3, [r5], #4
 8004034:	4798      	blx	r3
 8004036:	3601      	adds	r6, #1
 8004038:	e7ee      	b.n	8004018 <__libc_init_array+0xc>
 800403a:	f855 3b04 	ldr.w	r3, [r5], #4
 800403e:	4798      	blx	r3
 8004040:	3601      	adds	r6, #1
 8004042:	e7f2      	b.n	800402a <__libc_init_array+0x1e>
 8004044:	08005640 	.word	0x08005640
 8004048:	08005640 	.word	0x08005640
 800404c:	08005640 	.word	0x08005640
 8004050:	08005644 	.word	0x08005644

08004054 <_init>:
 8004054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004056:	bf00      	nop
 8004058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800405a:	bc08      	pop	{r3}
 800405c:	469e      	mov	lr, r3
 800405e:	4770      	bx	lr

08004060 <_fini>:
 8004060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004062:	bf00      	nop
 8004064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004066:	bc08      	pop	{r3}
 8004068:	469e      	mov	lr, r3
 800406a:	4770      	bx	lr
